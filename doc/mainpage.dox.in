/* 
 * This file is a part of IPO, a C++ library for investigating
 * polyhedra by oracles.
 *
 * Copyright (C) 2015-2016
 * Matthias Walter
 *
 * Permission to use, modify and distribute this software is granted
 * provided that this copyright notice appears in all copies. For
 * precise terms see the accompanying LICENSE file.
 *
 * This software is provided "AS IS" with no warranty of any kind,
 * express or implied, and with no claim as to its suitability for any
 * purpose.
 */

/**
\mainpage IPO - Investigating Polyhedra by Oracles

\section description Description

<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>
is a software library for certain problems in polyhedral combinatorics
such as computing the affine hull, checking adjacency, or computing facets.
In contrast to other tools, it only requires the polyhedra to be given
implicitly by means of so-called <em>optimization oracles</em>.

\section motivation Motivation

In mathematical optimization, it is common to encode certain
combinatorial objects (e.g., routes, schedules, decisions) as points in the Euclidean space
and consider their convex hulls, which are usually polyhedra.
Using this approach, properties concerning the facial structures of these polyhedra become of central interest.
In general, classical enumeration-based algorithms investigating such properties turn out to be impractical already for small dimensions, e.g., <em>n=20</em>.

On the other hand, maximizing linear objective functions over these polyhedra (though most often NP-hard)
can be done very efficiently for moderate sizes (say <em>n=100</em>), e.g., by mixed-integer programming solvers.
<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>
uses such <em>optimization oracles</em> and (partially) solves some of the problems mentioned above.
For this it utilizes the LP solver
<a href="http://soplex.zib.de/">SoPlex</a>,
in particular its ability to compute solutions in exact arithmetic.
        
\section functionality Functionality
        
Given an optimization oracle defining a polyhedron <em>P</em>,
<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>
can...
\li compute the <b>affine hull</b> of <em>P</em><br/>
    in the sense that it returns <em>(d+1)</em> many affinely independent points in <em>P</em> and
    <em>(n-d)</em> many linearly independent equations valid for <em>P</em>, where <em>d</em> is <em>P</em> 's dimension.
\li compute a <b>facet-defining inequality</b> that is <b>violated</b> by a given point.<br/>
\li compute <b>facets that are "helpful"</b> when maximizing a specified objective vector <em>c</em>.<br/>
    More precisely, it iteratively solves LPs whose inequalities correspond to some of <em>P</em> 's facets,
    until the current optimum is in <em>P</em>.
    As long as this is not the case, the procedure returns violated facet-defining inequalities and adds them to the LP.
\li <b>check</b> whether two given vertices of <em>P</em> are <b>adjacent</b>.<br/>
\li compute the <b>smallest face</b> of <em>P</em> <b>containing a given point</b><br/>
    by means of an inequality defining this face.
\li <b>check</b> whether a given point is a <b>vertex</b> of <em>P</em></b>.<br/>

\section oracles Oracles

<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>'s
requirements for an optimization oracle are very simple:

\li Essentially, for a given objective vector, it only has to return
    a point in <em>P</em> of maximum objective value.
\li If the maximum is not attained, it must return an unbounded direction proving this.
    Of course, if <em>P</em> is empty, it must claim "infeasible".
\li In order to speed up certain algorithms,
    an oracle may also return non-optimal solutions if permitted by the caller.

\section technicalDetails Technical Details

<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>
is implemented in C++ and uses exact arithmetic. 
It depends on the LP solver
<a href="http://soplex.zib.de/">SoPlex</a>.
In order to implement an optimization oracle,
there are some base classes from which one must inherit:

\li <span style="font-size: 1.2em; font-family: monospace;">OptimizationOracleBase</span>: 
    The most general base class.
\li <span style="font-size: 1.2em; font-family: monospace;">FaceOptimizationOracleBase</span>: 
    Inherit from this class if your oracle directly supports optimization over any face given by an inducing inequality.

For mixed-integer programs, several oracles are already implemented:
\li <span style="font-size: 1.2em; font-family: monospace;">SCIPOptimizationOracle</span>:
    This oracle is built from a 
    <a href="http://scip.zib.de/">SCIP</a>
    instance which is used for optimization.
    The returned floating-point solutions are turned into rational ones using rational-reconstruction techniques.
\li <span style="font-size: 1.2em; font-family: monospace;">MixedIntegerProgramCorrectorOracle</span>:
    This oracle is built from a <em>MixedIntegerProgram</em> instance which explicitly represents a MIP and
    another oracle which is supposed to solve the MIP, allowing approximate solutions.
    It takes the returned solutions and checks/restores feasibility and optimality w.r.t. the continuous variables.
    Use this on top of an oracle which simply reconstructs floating-point solutions.
\li <span style="font-size: 1.2em; font-family: monospace;">ExactSCIPOptimizationOracle</span>:
    This oracle is built from a <em>MixedIntegerProgram</em> instances which explicitly represents a MIP and optionally
    another oracle which may act as a heuristic.
    If non-optimality is permitted, it runs the heuristic oracle,
    and otherwise
    <a href="http://scip.zib.de/#exact">SCIP-ex</a>.

\section about Usage

<span style="color: #007bff; font-weight: bold;">I</span><span style="font-weight: bold;">P</span><span style="color: #ff0000; font-weight: bold;">O</span></span>
is an open source project.
You are free to use it in your commercial or
non-commercial applications under very permissive
\ref license "license terms".

The project is maintained by Matthias Walter.

*/
