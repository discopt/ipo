/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/opt/scipoptsuite-3.2.1/soplex-2.2.1/src/rational.h", 
            "/usr/local/include/ipo/linear_constraint.h", 
            "/usr/local/include/ipo/oracles.h", 
            "/usr/local/include/ipo/polyhedron.h", 
            "/usr/local/include/ipo/python_wrapper.h", 
            "/usr/local/include/ipo/space.h", 
            "/usr/local/include/ipo/test.h", 
            "/usr/local/include/ipo/vectors.h"
        ], 
        "extra_compile_args": [
            "-std=c++11"
        ], 
        "include_dirs": [
            "/usr/local/include/", 
            "/opt/scipoptsuite-3.2.1/soplex-2.2.1/src", 
            "/opt/scipoptsuite-3.2.1/scip-3.2.1/src"
        ], 
        "language": "c++", 
        "libraries": [
            "ipo", 
            "scipopt-3.2.1.linux.x86_64.gnu.opt", 
            "soplex-2.2.1.linux.x86_64.gnu.opt", 
            "scip-3.2.1.linux.x86_64.gnu.opt", 
            "zimpl-3.3.3.linux.x86_64.gnu.opt", 
            "nlpi.cppad.linux.x86_64.gnu.opt", 
            "objscip-3.2.1.linux.x86_64.gnu.opt", 
            "lpispx-3.2.1.linux.x86_64.gnu.opt", 
            "gmp", 
            "gmpxx", 
            "z"
        ], 
        "library_dirs": [
            "/usr/local/lib/", 
            "/opt/scipoptsuite-3.2.1/lib/", 
            "/opt/scipoptsuite-3.2.1/soplex-2.2.1/lib/", 
            "/opt/scipoptsuite-3.2.1/scip-3.2.1/lib", 
            "/opt/scipoptsuite-3.2.1/zimpl-3.3.3/lib"
        ], 
        "runtime_library_dirs": [
            "/usr/local/lib/", 
            "/opt/scipoptsuite-3.2.1/lib/", 
            "/opt/scipoptsuite-3.2.1/soplex-2.2.1/lib/", 
            "/opt/scipoptsuite-3.2.1/scip-3.2.1/lib", 
            "/opt/scipoptsuite-3.2.1/zimpl-3.3.3/lib"
        ]
    }, 
    "module_name": "IPO"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__IPO
#define __PYX_HAVE_API__IPO
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <memory>
#include "rational.h"
#include "ipo/vectors.h"
#include "ipo/linear_constraint.h"
#include <iostream>
#include "ipo/space.h"
#include "ipo/oracles.h"
#include "ipo/polyhedron.h"
#include "ipo/python_wrapper.h"
#include "ipo/test.h"
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "IPO.pyx",
  "stringsource",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_3IPO_SoplexRational;
struct __pyx_obj_3IPO_IPOReferenceCountedVector;
struct __pyx_obj_3IPO_IPOVector;
struct __pyx_obj_3IPO_IPOLinearConstraint;
struct __pyx_obj_3IPO_IPOInnerDescription;
struct __pyx_obj_3IPO_IPOAffineOuterDescription;
struct __pyx_obj_3IPO_IPOSpace;
struct __pyx_obj_3IPO_IPOScipOracle;
struct __pyx_obj_3IPO_IPOPolyhedron;
struct __pyx_obj_3IPO_IPOFace;
struct __pyx_obj_3IPO_Test;

/* "IPO.pyx":20
 * ####################################
 * #Soplex Rational
 * cdef class SoplexRational:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.Rational *cpp_rational
 *     cdef const cppIPO.Rational *const_rational
 */
struct __pyx_obj_3IPO_SoplexRational {
  PyObject_HEAD
  soplex::Rational *cpp_rational;
  soplex::Rational const *const_rational;
};


/* "IPO.pyx":47
 * #IPO Vector
 * 
 * cdef class IPOReferenceCountedVector:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.ReferenceCountedVector *vec
 *     cdef const cppIPO.ReferenceCountedVector *const_vec
 */
struct __pyx_obj_3IPO_IPOReferenceCountedVector {
  PyObject_HEAD
  ipo::ReferenceCountedVector *vec;
  ipo::ReferenceCountedVector const *const_vec;
};


/* "IPO.pyx":52
 * 
 * 
 * cdef class IPOVector:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.Vector *vec
 *     cdef const cppIPO.Vector *const_vec
 */
struct __pyx_obj_3IPO_IPOVector {
  PyObject_HEAD
  ipo::Vector *vec;
  ipo::Vector const *const_vec;
};


/* "IPO.pyx":154
 * #IPO Linear Constraint
 * 
 * cdef class IPOLinearConstraint:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.LinearConstraint *lin
 *     cdef const cppIPO.LinearConstraint *const_lin
 */
struct __pyx_obj_3IPO_IPOLinearConstraint {
  PyObject_HEAD
  ipo::LinearConstraint *lin;
  ipo::LinearConstraint const *const_lin;
};


/* "IPO.pyx":271
 * #InnerDesciption/OuterDescription
 * 
 * cdef class IPOInnerDescription:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.points = []
 */
struct __pyx_obj_3IPO_IPOInnerDescription {
  PyObject_HEAD
};


/* "IPO.pyx":276
 *         self.rays = []
 * 
 * cdef class IPOAffineOuterDescription:             # <<<<<<<<<<<<<<
 *     def __init__(self, cons):
 *         self.constraints = []
 */
struct __pyx_obj_3IPO_IPOAffineOuterDescription {
  PyObject_HEAD
};


/* "IPO.pyx":284
 * #IPO Space
 * 
 * cdef class IPOSpace:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.Space *cpp_space
 *     cdef const cppIPO.Space *const_space
 */
struct __pyx_obj_3IPO_IPOSpace {
  PyObject_HEAD
  ipo::Space *cpp_space;
  ipo::Space const *const_space;
};


/* "IPO.pyx":388
 * ####################################
 * #IPO ScipOracle
 * cdef class IPOScipOracle:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.ScipOracleController *oracle
 * 
 */
struct __pyx_obj_3IPO_IPOScipOracle {
  PyObject_HEAD
  ipo::ScipOracleController *oracle;
};


/* "IPO.pyx":474
 * ####################################
 * #IPO Polyhedron
 * cdef class IPOPolyhedron:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.Polyhedron* poly
 * 
 */
struct __pyx_obj_3IPO_IPOPolyhedron {
  PyObject_HEAD
  ipo::Polyhedron *poly;
};


/* "IPO.pyx":482
 * from cppIPO cimport Polyhedron
 * 
 * cdef class IPOFace:             # <<<<<<<<<<<<<<
 *     cdef Polyhedron.Face* face
 * 
 */
struct __pyx_obj_3IPO_IPOFace {
  PyObject_HEAD
  ipo::Polyhedron::Face *face;
};


/* "IPO.pyx":494
 * #IPO Test
 * 
 * cdef class Test:             # <<<<<<<<<<<<<<
 *     cdef cppIPO.Foo* foo
 * 
 */
struct __pyx_obj_3IPO_Test {
  PyObject_HEAD
  ipo::Foo *foo;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'cppIPO' */

/* Module declarations from 'libc' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'IPO' */
static PyTypeObject *__pyx_ptype_3IPO_SoplexRational = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOReferenceCountedVector = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOVector = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOLinearConstraint = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOInnerDescription = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOAffineOuterDescription = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOSpace = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOScipOracle = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOPolyhedron = 0;
static PyTypeObject *__pyx_ptype_3IPO_IPOFace = 0;
static PyTypeObject *__pyx_ptype_3IPO_Test = 0;
static PyObject *__pyx_f_3IPO_CreateConstSoplexRational(soplex::Rational const *); /*proto*/
static PyObject *__pyx_f_3IPO_CreateIPOVector(ipo::Vector *); /*proto*/
static PyObject *__pyx_f_3IPO_CreateConstIPOVector(ipo::Vector const *); /*proto*/
static PyObject *__pyx_f_3IPO_CreateLinearConstraint(ipo::LinearConstraint *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "IPO"
int __pyx_module_is_main_IPO = 0;

/* Implementation of 'IPO' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_A[] = "A\n";
static const char __pyx_k_B[] = "B\n";
static const char __pyx_k_C[] = "C\n";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_J[] = "J";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_L[] = "L\n";
static const char __pyx_k_M[] = "M\n";
static const char __pyx_k_IPO[] = "IPO";
static const char __pyx_k__14[] = "\n";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_lin[] = "lin";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_cerr[] = "cerr";
static const char __pyx_k_clog[] = "clog";
static const char __pyx_k_cons[] = "cons";
static const char __pyx_k_cout[] = "cout";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_rays[] = "rays";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_isNew[] = "isNew";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_FERTIG[] = "FERTIG\n";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_isConst[] = "isConst";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_IPOVector[] = "IPOVector";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_affineHull[] = "affineHull";
static const char __pyx_k_isConstant[] = "isConstant";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_constraints[] = "constraints";
static const char __pyx_k_C_call_inner[] = "C++ call inner\n";
static const char __pyx_k_C_call_outer[] = "C++ call outer\n";
static const char __pyx_k_NonConstError[] = "NonConstError";
static const char __pyx_k_NonConstError_init[] = "NonConstError.init";
static const char __pyx_k_inner_verarbeitung[] = "inner verarbeitung\n";
static const char __pyx_k_IPOLinearConstraint[] = "IPOLinearConstraint";
static const char __pyx_k_NonConstError___str[] = "NonConstError.__str__";
static const char __pyx_k_This_is_no_const_value[] = "This is no const value: ";
static const char __pyx_k_home_sandra_Documents_HiWi_IPO[] = "/home/sandra/Documents/HiWi/IPO/ipo/tools/Wrapper/IPO.pyx";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_s_C_call_inner;
static PyObject *__pyx_kp_s_C_call_outer;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_FERTIG;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_IPO;
static PyObject *__pyx_n_s_IPOLinearConstraint;
static PyObject *__pyx_n_s_IPOVector;
static PyObject *__pyx_n_s_J;
static PyObject *__pyx_n_s_K;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_NonConstError;
static PyObject *__pyx_n_s_NonConstError___str;
static PyObject *__pyx_n_s_NonConstError_init;
static PyObject *__pyx_kp_s_This_is_no_const_value;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s__14;
static PyObject *__pyx_n_s_affineHull;
static PyObject *__pyx_n_s_cerr;
static PyObject *__pyx_n_s_clog;
static PyObject *__pyx_n_s_cons;
static PyObject *__pyx_n_s_constraints;
static PyObject *__pyx_n_s_cout;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_home_sandra_Documents_HiWi_IPO;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_s_inner_verarbeitung;
static PyObject *__pyx_n_s_isConst;
static PyObject *__pyx_n_s_isConstant;
static PyObject *__pyx_n_s_isNew;
static PyObject *__pyx_n_s_lin;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rays;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_pf_3IPO_13NonConstError_init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3IPO_13NonConstError_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_3IPO_14SoplexRational___cinit__(struct __pyx_obj_3IPO_SoplexRational *__pyx_v_self, PyObject *__pyx_v_isConst); /* proto */
static void __pyx_pf_3IPO_14SoplexRational_2__dealloc__(struct __pyx_obj_3IPO_SoplexRational *__pyx_v_self); /* proto */
static int __pyx_pf_3IPO_9IPOVector___cinit__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_isConst); /* proto */
static void __pyx_pf_3IPO_9IPOVector_2__dealloc__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_4swap(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_6isConstant(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_8size(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_10isSorted(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_12index(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_14approximation(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_3IPO_9IPOVector_16__richcmp__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, struct __pyx_obj_3IPO_IPOReferenceCountedVector *__pyx_v_y, int __pyx_v_op); /* proto */
static int __pyx_pf_3IPO_19IPOLinearConstraint___cinit__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, PyObject *__pyx_v_isConst); /* proto */
static void __pyx_pf_3IPO_19IPOLinearConstraint_2__dealloc__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_4isConstant(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_6__richcmp__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_y, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_8isEquation(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_10type(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_12normal(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_14rhs(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_16getMaximumNorm(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_18definesCompleteFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_20definesEmptyFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_22definesTrivialFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_24evaluatePoint(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_point); /* proto */
static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_26evaluateRay(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_ray); /* proto */
static int __pyx_pf_3IPO_19IPOInnerDescription___init__(struct __pyx_obj_3IPO_IPOInnerDescription *__pyx_v_self); /* proto */
static int __pyx_pf_3IPO_25IPOAffineOuterDescription___init__(struct __pyx_obj_3IPO_IPOAffineOuterDescription *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_cons); /* proto */
static int __pyx_pf_3IPO_8IPOSpace___cinit__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, PyObject *__pyx_v_isConst); /* proto */
static void __pyx_pf_3IPO_8IPOSpace_2__dealloc__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_4isConstant(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_6dimension(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_8printVector(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, PyObject *__pyx_v_stream, struct __pyx_obj_3IPO_IPOVector *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_10printLinearForm(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_12printLinearConstraint(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_lincons); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_14__getitem__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, int __pyx_v_key); /* proto */
static PyObject *__pyx_pf_3IPO_8IPOSpace_16__richcmp__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOSpace *__pyx_v_y, int __pyx_v_op); /* proto */
static int __pyx_pf_3IPO_13IPOScipOracle___cinit__(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_v_isNew); /* proto */
static void __pyx_pf_3IPO_13IPOScipOracle_2__dealloc__(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_13IPOScipOracle_4name(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_13IPOScipOracle_6heuristicLevel(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_13IPOScipOracle_8heuristicLevel_CacheOracle(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_13IPOScipOracle_10affineHull(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_outputMode); /* proto */
static PyObject *__pyx_pf_3IPO_affineHull(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_3IPO_4Test___cinit__(struct __pyx_obj_3IPO_Test *__pyx_v_self); /* proto */
static void __pyx_pf_3IPO_4Test_2__dealloc__(struct __pyx_obj_3IPO_Test *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IPO_4Test_4print_Example(struct __pyx_obj_3IPO_Test *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_3IPO_SoplexRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOReferenceCountedVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOLinearConstraint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOInnerDescription(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOAffineOuterDescription(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOSpace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOScipOracle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOPolyhedron(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_IPOFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IPO_Test(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__19;

/* "IPO.pyx":12
 * #Errors
 * class NonConstError:
 *     def init(self, value):             # <<<<<<<<<<<<<<
 *         self.value = 'This is no const value: '+value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13NonConstError_1init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3IPO_13NonConstError_1init = {"init", (PyCFunction)__pyx_pw_3IPO_13NonConstError_1init, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3IPO_13NonConstError_1init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, 1); __PYX_ERR(0, 12, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init") < 0)) __PYX_ERR(0, 12, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 12, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.NonConstError.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_13NonConstError_init(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13NonConstError_init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("init", 0);

  /* "IPO.pyx":13
 * class NonConstError:
 *     def init(self, value):
 *         self.value = 'This is no const value: '+value             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_This_is_no_const_value, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_value, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":12
 * #Errors
 * class NonConstError:
 *     def init(self, value):             # <<<<<<<<<<<<<<
 *         self.value = 'This is no const value: '+value
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.NonConstError.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":15
 *         self.value = 'This is no const value: '+value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13NonConstError_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3IPO_13NonConstError_3__str__ = {"__str__", (PyCFunction)__pyx_pw_3IPO_13NonConstError_3__str__, METH_O, 0};
static PyObject *__pyx_pw_3IPO_13NonConstError_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_13NonConstError_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13NonConstError_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "IPO.pyx":16
 * 
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * ####################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":15
 *         self.value = 'This is no const value: '+value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.NonConstError.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":24
 *     cdef const cppIPO.Rational *const_rational
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(not isConst):
 *             self.cpp_rational = new cppIPO.Rational()
 */

/* Python wrapper */
static int __pyx_pw_3IPO_14SoplexRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_14SoplexRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isConst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isConst,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isConst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 24, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_isConst = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 24, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.SoplexRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_14SoplexRational___cinit__(((struct __pyx_obj_3IPO_SoplexRational *)__pyx_v_self), __pyx_v_isConst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_14SoplexRational___cinit__(struct __pyx_obj_3IPO_SoplexRational *__pyx_v_self, PyObject *__pyx_v_isConst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  soplex::Rational *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":25
 * 
 *     def __cinit__(self, isConst):
 *         if(not isConst):             # <<<<<<<<<<<<<<
 *             self.cpp_rational = new cppIPO.Rational()
 *             if self.cpp_rational is NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isConst); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "IPO.pyx":26
 *     def __cinit__(self, isConst):
 *         if(not isConst):
 *             self.cpp_rational = new cppIPO.Rational()             # <<<<<<<<<<<<<<
 *             if self.cpp_rational is NULL:
 *                 raise MemoryError()
 */
    try {
      __pyx_t_3 = new soplex::Rational();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 26, __pyx_L1_error)
    }
    __pyx_v_self->cpp_rational = __pyx_t_3;

    /* "IPO.pyx":27
 *         if(not isConst):
 *             self.cpp_rational = new cppIPO.Rational()
 *             if self.cpp_rational is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 * 
 */
    __pyx_t_2 = ((__pyx_v_self->cpp_rational == NULL) != 0);
    if (__pyx_t_2) {

      /* "IPO.pyx":28
 *             self.cpp_rational = new cppIPO.Rational()
 *             if self.cpp_rational is NULL:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      PyErr_NoMemory(); __PYX_ERR(0, 28, __pyx_L1_error)

      /* "IPO.pyx":27
 *         if(not isConst):
 *             self.cpp_rational = new cppIPO.Rational()
 *             if self.cpp_rational is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 * 
 */
    }

    /* "IPO.pyx":25
 * 
 *     def __cinit__(self, isConst):
 *         if(not isConst):             # <<<<<<<<<<<<<<
 *             self.cpp_rational = new cppIPO.Rational()
 *             if self.cpp_rational is NULL:
 */
  }

  /* "IPO.pyx":24
 *     cdef const cppIPO.Rational *const_rational
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(not isConst):
 *             self.cpp_rational = new cppIPO.Rational()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.SoplexRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":30
 *                 raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cpp_rational
 *         del self.const_rational
 */

/* Python wrapper */
static void __pyx_pw_3IPO_14SoplexRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_14SoplexRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_14SoplexRational_2__dealloc__(((struct __pyx_obj_3IPO_SoplexRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_14SoplexRational_2__dealloc__(struct __pyx_obj_3IPO_SoplexRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":31
 * 
 *     def __dealloc__(self):
 *         del self.cpp_rational             # <<<<<<<<<<<<<<
 *         del self.const_rational
 * 
 */
  delete __pyx_v_self->cpp_rational;

  /* "IPO.pyx":32
 *     def __dealloc__(self):
 *         del self.cpp_rational
 *         del self.const_rational             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):
 */
  delete __pyx_v_self->const_rational;

  /* "IPO.pyx":30
 *                 raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cpp_rational
 *         del self.const_rational
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":34
 *         del self.const_rational
 * 
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):             # <<<<<<<<<<<<<<
 *     py_rational = SoplexRational(False)
 *     py_rational.cpp_rational = rational
 */

static PyObject *__pyx_f_3IPO_CreateSoplexRational(soplex::Rational *__pyx_v_rational) {
  struct __pyx_obj_3IPO_SoplexRational *__pyx_v_py_rational = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateSoplexRational", 0);

  /* "IPO.pyx":35
 * 
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):
 *     py_rational = SoplexRational(False)             # <<<<<<<<<<<<<<
 *     py_rational.cpp_rational = rational
 *     return py_rational
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_SoplexRational), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_rational = ((struct __pyx_obj_3IPO_SoplexRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":36
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):
 *     py_rational = SoplexRational(False)
 *     py_rational.cpp_rational = rational             # <<<<<<<<<<<<<<
 *     return py_rational
 * 
 */
  __pyx_v_py_rational->cpp_rational = __pyx_v_rational;

  /* "IPO.pyx":37
 *     py_rational = SoplexRational(False)
 *     py_rational.cpp_rational = rational
 *     return py_rational             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_rational));
  __pyx_r = ((PyObject *)__pyx_v_py_rational);
  goto __pyx_L0;

  /* "IPO.pyx":34
 *         del self.const_rational
 * 
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):             # <<<<<<<<<<<<<<
 *     py_rational = SoplexRational(False)
 *     py_rational.cpp_rational = rational
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateSoplexRational", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_rational);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":39
 *     return py_rational
 * 
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):             # <<<<<<<<<<<<<<
 *     py_rational = SoplexRational(True)
 *     py_rational.const_rational = rational
 */

static PyObject *__pyx_f_3IPO_CreateConstSoplexRational(soplex::Rational const *__pyx_v_rational) {
  struct __pyx_obj_3IPO_SoplexRational *__pyx_v_py_rational = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateConstSoplexRational", 0);

  /* "IPO.pyx":40
 * 
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):
 *     py_rational = SoplexRational(True)             # <<<<<<<<<<<<<<
 *     py_rational.const_rational = rational
 *     return py_rational
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_SoplexRational), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_rational = ((struct __pyx_obj_3IPO_SoplexRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":41
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):
 *     py_rational = SoplexRational(True)
 *     py_rational.const_rational = rational             # <<<<<<<<<<<<<<
 *     return py_rational
 * 
 */
  __pyx_v_py_rational->const_rational = __pyx_v_rational;

  /* "IPO.pyx":42
 *     py_rational = SoplexRational(True)
 *     py_rational.const_rational = rational
 *     return py_rational             # <<<<<<<<<<<<<<
 * 
 * ####################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_rational));
  __pyx_r = ((PyObject *)__pyx_v_py_rational);
  goto __pyx_L0;

  /* "IPO.pyx":39
 *     return py_rational
 * 
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):             # <<<<<<<<<<<<<<
 *     py_rational = SoplexRational(True)
 *     py_rational.const_rational = rational
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateConstSoplexRational", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_rational);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":56
 *     cdef const cppIPO.Vector *const_vec
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(not isConst):
 *             self.vec = new cppIPO.Vector()
 */

/* Python wrapper */
static int __pyx_pw_3IPO_9IPOVector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_9IPOVector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isConst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isConst,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isConst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 56, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_isConst = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOVector.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_9IPOVector___cinit__(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self), __pyx_v_isConst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_9IPOVector___cinit__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_isConst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  ipo::Vector *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":57
 * 
 *     def __cinit__(self, isConst):
 *         if(not isConst):             # <<<<<<<<<<<<<<
 *             self.vec = new cppIPO.Vector()
 *             if (self.vec is NULL):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isConst); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "IPO.pyx":58
 *     def __cinit__(self, isConst):
 *         if(not isConst):
 *             self.vec = new cppIPO.Vector()             # <<<<<<<<<<<<<<
 *             if (self.vec is NULL):
 *                 raise MemoryError()
 */
    try {
      __pyx_t_3 = new ipo::Vector();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 58, __pyx_L1_error)
    }
    __pyx_v_self->vec = __pyx_t_3;

    /* "IPO.pyx":59
 *         if(not isConst):
 *             self.vec = new cppIPO.Vector()
 *             if (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *     def __dealloc__(self):
 */
    __pyx_t_2 = ((__pyx_v_self->vec == NULL) != 0);
    if (__pyx_t_2) {

      /* "IPO.pyx":60
 *             self.vec = new cppIPO.Vector()
 *             if (self.vec is NULL):
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if(self.vec is not NULL):
 */
      PyErr_NoMemory(); __PYX_ERR(0, 60, __pyx_L1_error)

      /* "IPO.pyx":59
 *         if(not isConst):
 *             self.vec = new cppIPO.Vector()
 *             if (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *     def __dealloc__(self):
 */
    }

    /* "IPO.pyx":57
 * 
 *     def __cinit__(self, isConst):
 *         if(not isConst):             # <<<<<<<<<<<<<<
 *             self.vec = new cppIPO.Vector()
 *             if (self.vec is NULL):
 */
  }

  /* "IPO.pyx":56
 *     cdef const cppIPO.Vector *const_vec
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(not isConst):
 *             self.vec = new cppIPO.Vector()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.IPOVector.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":61
 *             if (self.vec is NULL):
 *                 raise MemoryError()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             del self.vec
 */

/* Python wrapper */
static void __pyx_pw_3IPO_9IPOVector_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_9IPOVector_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_9IPOVector_2__dealloc__(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_9IPOVector_2__dealloc__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":62
 *                 raise MemoryError()
 *     def __dealloc__(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             del self.vec
 *         if(self.const_vec is not NULL):
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":63
 *     def __dealloc__(self):
 *         if(self.vec is not NULL):
 *             del self.vec             # <<<<<<<<<<<<<<
 *         if(self.const_vec is not NULL):
 *             del self.const_vec
 */
    delete __pyx_v_self->vec;

    /* "IPO.pyx":62
 *                 raise MemoryError()
 *     def __dealloc__(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             del self.vec
 *         if(self.const_vec is not NULL):
 */
  }

  /* "IPO.pyx":64
 *         if(self.vec is not NULL):
 *             del self.vec
 *         if(self.const_vec is not NULL):             # <<<<<<<<<<<<<<
 *             del self.const_vec
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->const_vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":65
 *             del self.vec
 *         if(self.const_vec is not NULL):
 *             del self.const_vec             # <<<<<<<<<<<<<<
 * 
 *     def swap(self, IPOVector other):
 */
    delete __pyx_v_self->const_vec;

    /* "IPO.pyx":64
 *         if(self.vec is not NULL):
 *             del self.vec
 *         if(self.const_vec is not NULL):             # <<<<<<<<<<<<<<
 *             del self.const_vec
 * 
 */
  }

  /* "IPO.pyx":61
 *             if (self.vec is NULL):
 *                 raise MemoryError()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             del self.vec
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":67
 *             del self.const_vec
 * 
 *     def swap(self, IPOVector other):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             self.vec.swap(deref(other.vec))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_5swap(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_5swap(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3IPO_IPOVector, 1, "other", 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_9IPOVector_4swap(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_4swap(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("swap", 0);

  /* "IPO.pyx":68
 * 
 *     def swap(self, IPOVector other):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             self.vec.swap(deref(other.vec))
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":69
 *     def swap(self, IPOVector other):
 *         if(self.vec is not NULL):
 *             self.vec.swap(deref(other.vec))             # <<<<<<<<<<<<<<
 * 
 *     def isConstant(self):
 */
    __pyx_v_self->vec->swap((*__pyx_v_other->vec));

    /* "IPO.pyx":68
 * 
 *     def swap(self, IPOVector other):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             self.vec.swap(deref(other.vec))
 * 
 */
  }

  /* "IPO.pyx":67
 *             del self.const_vec
 * 
 *     def swap(self, IPOVector other):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             self.vec.swap(deref(other.vec))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":71
 *             self.vec.swap(deref(other.vec))
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.vec is NULL)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_7isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_7isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConstant (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_9IPOVector_6isConstant(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_6isConstant(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isConstant", 0);

  /* "IPO.pyx":72
 * 
 *     def isConstant(self):
 *         return (self.vec is NULL)             # <<<<<<<<<<<<<<
 * 
 *     #Parent Class methods
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->vec == NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":71
 *             self.vec.swap(deref(other.vec))
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.vec is NULL)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOVector.isConstant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":75
 * 
 *     #Parent Class methods
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_9size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_9size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_9IPOVector_8size(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_8size(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "IPO.pyx":76
 *     #Parent Class methods
 *     def size(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":77
 *     def size(self):
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()             # <<<<<<<<<<<<<<
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>(self.const_vec)).size()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(((ipo::ReferenceCountedVector *)__pyx_v_self->vec)->size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":76
 *     #Parent Class methods
 *     def size(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()
 *         else:
 */
  }

  /* "IPO.pyx":79
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>(self.const_vec)).size()             # <<<<<<<<<<<<<<
 * 
 *     def isSorted(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec)->size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":75
 * 
 *     #Parent Class methods
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>(self.vec)).size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOVector.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":81
 *             return (<cppIPO.ReferenceCountedVector*>(self.const_vec)).size()
 * 
 *     def isSorted(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_11isSorted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_11isSorted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSorted (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_9IPOVector_10isSorted(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_10isSorted(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isSorted", 0);

  /* "IPO.pyx":82
 * 
 *     def isSorted(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":83
 *     def isSorted(self):
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()             # <<<<<<<<<<<<<<
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).isSorted()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(((ipo::ReferenceCountedVector *)__pyx_v_self->vec)->isSorted()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":82
 * 
 *     def isSorted(self):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()
 *         else:
 */
  }

  /* "IPO.pyx":85
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).isSorted()             # <<<<<<<<<<<<<<
 * 
 *     def index(self, position):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec)->isSorted()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":81
 *             return (<cppIPO.ReferenceCountedVector*>(self.const_vec)).size()
 * 
 *     def isSorted(self):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).isSorted()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOVector.isSorted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":87
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).isSorted()
 * 
 *     def index(self, position):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_13index(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_13index(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_9IPOVector_12index(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self), ((PyObject *)__pyx_v_position));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_12index(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("index", 0);

  /* "IPO.pyx":88
 * 
 *     def index(self, position):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":89
 *     def index(self, position):
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)             # <<<<<<<<<<<<<<
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).index(position)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_position); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(((ipo::ReferenceCountedVector *)__pyx_v_self->vec)->index(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":88
 * 
 *     def index(self, position):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)
 *         else:
 */
  }

  /* "IPO.pyx":91
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).index(position)             # <<<<<<<<<<<<<<
 * 
 *     def approximation(self, position):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_position); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec)->index(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":87
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).isSorted()
 * 
 *     def index(self, position):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).index(position)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOVector.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":93
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).index(position)
 * 
 *     def approximation(self, position):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_15approximation(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_15approximation(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approximation (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_9IPOVector_14approximation(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self), ((PyObject *)__pyx_v_position));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_14approximation(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("approximation", 0);

  /* "IPO.pyx":94
 * 
 *     def approximation(self, position):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->vec != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":95
 *     def approximation(self, position):
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)             # <<<<<<<<<<<<<<
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).approximation(position)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_position); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
    __pyx_t_3 = PyFloat_FromDouble(((ipo::ReferenceCountedVector *)__pyx_v_self->vec)->approximation(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":94
 * 
 *     def approximation(self, position):
 *         if(self.vec is not NULL):             # <<<<<<<<<<<<<<
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)
 *         else:
 */
  }

  /* "IPO.pyx":97
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)
 *         else:
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).approximation(position)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_position); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
    __pyx_t_3 = PyFloat_FromDouble(((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec)->approximation(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":93
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).index(position)
 * 
 *     def approximation(self, position):             # <<<<<<<<<<<<<<
 *         if(self.vec is not NULL):
 *             return (<cppIPO.ReferenceCountedVector*>self.vec).approximation(position)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOVector.approximation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":99
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).approximation(position)
 * 
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):             # <<<<<<<<<<<<<<
 *         if not y.isConstant():
 *             if not (self.vec is NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_9IPOVector_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_3IPO_9IPOVector_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3IPO_IPOVector, 1, "self", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_3IPO_IPOReferenceCountedVector, 0, "y", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_9IPOVector_16__richcmp__(((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOReferenceCountedVector *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_9IPOVector_16__richcmp__(struct __pyx_obj_3IPO_IPOVector *__pyx_v_self, struct __pyx_obj_3IPO_IPOReferenceCountedVector *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "IPO.pyx":100
 * 
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):
 *         if not y.isConstant():             # <<<<<<<<<<<<<<
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "IPO.pyx":101
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):
 *         if not y.isConstant():
 *             if not (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 */
    __pyx_t_5 = ((__pyx_v_self->vec != NULL) != 0);
    if (__pyx_t_5) {

      /* "IPO.pyx":102
 *         if not y.isConstant():
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 *                 elif op == Py_EQ:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_LT) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":103
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) < __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":102
 *         if not y.isConstant():
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 *                 elif op == Py_EQ:
 */
      }

      /* "IPO.pyx":104
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 *                 elif op == Py_NE:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":105
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) == __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":104
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":106
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.vec
 *                 else:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":107
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.vec             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) != __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":106
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.vec
 *                 else:
 */
      }

      /* "IPO.pyx":109
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.vec
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 *             else:
 *                 if op == Py_LT:
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 109, __pyx_L1_error)
          }
        }
        #endif
      }

      /* "IPO.pyx":101
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):
 *         if not y.isConstant():
 *             if not (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.vec
 */
      goto __pyx_L4;
    }

    /* "IPO.pyx":111
 *                     assert False
 *             else:
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec
 *                 elif op == Py_EQ:
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_op == Py_LT) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":112
 *             else:
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) < __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":111
 *                     assert False
 *             else:
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec
 *                 elif op == Py_EQ:
 */
      }

      /* "IPO.pyx":113
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 *                 elif op == Py_NE:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":114
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) == __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":113
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":115
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.vec
 *                 else:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":116
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.vec             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) != __pyx_v_y->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":115
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.vec
 *                 else:
 */
      }

      /* "IPO.pyx":118
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.vec
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 118, __pyx_L1_error)
          }
        }
        #endif
      }
    }
    __pyx_L4:;

    /* "IPO.pyx":100
 * 
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):
 *         if not y.isConstant():             # <<<<<<<<<<<<<<
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:
 */
    goto __pyx_L3;
  }

  /* "IPO.pyx":121
 * 
 *         else:
 *             if not (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 */
  /*else*/ {
    __pyx_t_5 = ((__pyx_v_self->vec != NULL) != 0);
    if (__pyx_t_5) {

      /* "IPO.pyx":122
 *         else:
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 *                 elif op == Py_EQ:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_LT) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":123
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) < __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":122
 *         else:
 *             if not (self.vec is NULL):
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 *                 elif op == Py_EQ:
 */
      }

      /* "IPO.pyx":124
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 *                 elif op == Py_NE:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":125
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.const_vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) == __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":124
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":126
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.const_vec
 *                 else:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":127
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.const_vec             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->vec) != __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":126
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))==y.const_vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.const_vec
 *                 else:
 */
      }

      /* "IPO.pyx":129
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))!=y.const_vec
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 *             else:
 *                 if op == Py_LT:
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 129, __pyx_L1_error)
          }
        }
        #endif
      }

      /* "IPO.pyx":121
 * 
 *         else:
 *             if not (self.vec is NULL):             # <<<<<<<<<<<<<<
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.vec))<y.const_vec
 */
      goto __pyx_L7;
    }

    /* "IPO.pyx":131
 *                     assert False
 *             else:
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec
 *                 elif op == Py_EQ:
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_op == Py_LT) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":132
 *             else:
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) < __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":131
 *                     assert False
 *             else:
 *                 if op == Py_LT:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec
 *                 elif op == Py_EQ:
 */
      }

      /* "IPO.pyx":133
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 *                 elif op == Py_NE:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":134
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.const_vec
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) == __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":133
 *                 if op == Py_LT:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))<y.const_vec
 *                 elif op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":135
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.const_vec
 *                 else:
 */
      __pyx_t_5 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_5) {

        /* "IPO.pyx":136
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 *                 elif op == Py_NE:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.const_vec             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong((((ipo::ReferenceCountedVector *)__pyx_v_self->const_vec) != __pyx_v_y->const_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":135
 *                 elif op == Py_EQ:
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))==y.const_vec
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.const_vec
 *                 else:
 */
      }

      /* "IPO.pyx":138
 *                     return (<cppIPO.ReferenceCountedVector*>(self.const_vec))!=y.const_vec
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 * 
 * 
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 138, __pyx_L1_error)
          }
        }
        #endif
      }
    }
    __pyx_L7:;
  }
  __pyx_L3:;

  /* "IPO.pyx":99
 *             return (<cppIPO.ReferenceCountedVector*>self.const_vec).approximation(position)
 * 
 *     def __richcmp__(IPOVector self, IPOReferenceCountedVector y not None, int op):             # <<<<<<<<<<<<<<
 *         if not y.isConstant():
 *             if not (self.vec is NULL):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOVector.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":141
 * 
 * 
 * cdef object CreateIPOVector(cppIPO.Vector *vector):             # <<<<<<<<<<<<<<
 *     py_vector = IPOVector(False)
 *     py_vector.vec = vector
 */

static PyObject *__pyx_f_3IPO_CreateIPOVector(ipo::Vector *__pyx_v_vector) {
  struct __pyx_obj_3IPO_IPOVector *__pyx_v_py_vector = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateIPOVector", 0);

  /* "IPO.pyx":142
 * 
 * cdef object CreateIPOVector(cppIPO.Vector *vector):
 *     py_vector = IPOVector(False)             # <<<<<<<<<<<<<<
 *     py_vector.vec = vector
 *     return py_vector
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOVector), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_vector = ((struct __pyx_obj_3IPO_IPOVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":143
 * cdef object CreateIPOVector(cppIPO.Vector *vector):
 *     py_vector = IPOVector(False)
 *     py_vector.vec = vector             # <<<<<<<<<<<<<<
 *     return py_vector
 * 
 */
  __pyx_v_py_vector->vec = __pyx_v_vector;

  /* "IPO.pyx":144
 *     py_vector = IPOVector(False)
 *     py_vector.vec = vector
 *     return py_vector             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_vector));
  __pyx_r = ((PyObject *)__pyx_v_py_vector);
  goto __pyx_L0;

  /* "IPO.pyx":141
 * 
 * 
 * cdef object CreateIPOVector(cppIPO.Vector *vector):             # <<<<<<<<<<<<<<
 *     py_vector = IPOVector(False)
 *     py_vector.vec = vector
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateIPOVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_vector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":146
 *     return py_vector
 * 
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):             # <<<<<<<<<<<<<<
 *     py_vector = IPOVector(True)
 *     py_vector.const_vec = vector
 */

static PyObject *__pyx_f_3IPO_CreateConstIPOVector(ipo::Vector const *__pyx_v_vector) {
  struct __pyx_obj_3IPO_IPOVector *__pyx_v_py_vector = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateConstIPOVector", 0);

  /* "IPO.pyx":147
 * 
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):
 *     py_vector = IPOVector(True)             # <<<<<<<<<<<<<<
 *     py_vector.const_vec = vector
 *     return py_vector
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOVector), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_vector = ((struct __pyx_obj_3IPO_IPOVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":148
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):
 *     py_vector = IPOVector(True)
 *     py_vector.const_vec = vector             # <<<<<<<<<<<<<<
 *     return py_vector
 * 
 */
  __pyx_v_py_vector->const_vec = __pyx_v_vector;

  /* "IPO.pyx":149
 *     py_vector = IPOVector(True)
 *     py_vector.const_vec = vector
 *     return py_vector             # <<<<<<<<<<<<<<
 * 
 * ####################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_vector));
  __pyx_r = ((PyObject *)__pyx_v_py_vector);
  goto __pyx_L0;

  /* "IPO.pyx":146
 *     return py_vector
 * 
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):             # <<<<<<<<<<<<<<
 *     py_vector = IPOVector(True)
 *     py_vector.const_vec = vector
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateConstIPOVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_vector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":158
 *     cdef const cppIPO.LinearConstraint *const_lin
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if (not isConst):
 *             self.lin = new cppIPO.LinearConstraint()
 */

/* Python wrapper */
static int __pyx_pw_3IPO_19IPOLinearConstraint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_19IPOLinearConstraint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isConst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isConst,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isConst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_isConst = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint___cinit__(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self), __pyx_v_isConst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_19IPOLinearConstraint___cinit__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, PyObject *__pyx_v_isConst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  ipo::LinearConstraint *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":159
 * 
 *     def __cinit__(self, isConst):
 *         if (not isConst):             # <<<<<<<<<<<<<<
 *             self.lin = new cppIPO.LinearConstraint()
 *             if self.lin is NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isConst); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "IPO.pyx":160
 *     def __cinit__(self, isConst):
 *         if (not isConst):
 *             self.lin = new cppIPO.LinearConstraint()             # <<<<<<<<<<<<<<
 *             if self.lin is NULL:
 *                 raise MemoryError()
 */
    try {
      __pyx_t_3 = new ipo::LinearConstraint();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    __pyx_v_self->lin = __pyx_t_3;

    /* "IPO.pyx":161
 *         if (not isConst):
 *             self.lin = new cppIPO.LinearConstraint()
 *             if self.lin is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *     def __dealloc__(self):
 */
    __pyx_t_2 = ((__pyx_v_self->lin == NULL) != 0);
    if (__pyx_t_2) {

      /* "IPO.pyx":162
 *             self.lin = new cppIPO.LinearConstraint()
 *             if self.lin is NULL:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.lin
 */
      PyErr_NoMemory(); __PYX_ERR(0, 162, __pyx_L1_error)

      /* "IPO.pyx":161
 *         if (not isConst):
 *             self.lin = new cppIPO.LinearConstraint()
 *             if self.lin is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *     def __dealloc__(self):
 */
    }

    /* "IPO.pyx":159
 * 
 *     def __cinit__(self, isConst):
 *         if (not isConst):             # <<<<<<<<<<<<<<
 *             self.lin = new cppIPO.LinearConstraint()
 *             if self.lin is NULL:
 */
  }

  /* "IPO.pyx":158
 *     cdef const cppIPO.LinearConstraint *const_lin
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if (not isConst):
 *             self.lin = new cppIPO.LinearConstraint()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":163
 *             if self.lin is NULL:
 *                 raise MemoryError()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.lin
 *         del self.const_lin
 */

/* Python wrapper */
static void __pyx_pw_3IPO_19IPOLinearConstraint_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_19IPOLinearConstraint_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_19IPOLinearConstraint_2__dealloc__(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_19IPOLinearConstraint_2__dealloc__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":164
 *                 raise MemoryError()
 *     def __dealloc__(self):
 *         del self.lin             # <<<<<<<<<<<<<<
 *         del self.const_lin
 * 
 */
  delete __pyx_v_self->lin;

  /* "IPO.pyx":165
 *     def __dealloc__(self):
 *         del self.lin
 *         del self.const_lin             # <<<<<<<<<<<<<<
 * 
 *     def isConstant(self):
 */
  delete __pyx_v_self->const_lin;

  /* "IPO.pyx":163
 *             if self.lin is NULL:
 *                 raise MemoryError()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.lin
 *         del self.const_lin
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":167
 *         del self.const_lin
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.const_lin is not NULL)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_5isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_5isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConstant (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_4isConstant(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_4isConstant(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isConstant", 0);

  /* "IPO.pyx":168
 * 
 *     def isConstant(self):
 *         return (self.const_lin is not NULL)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->const_lin != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":167
 *         del self.const_lin
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.const_lin is not NULL)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.isConstant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":170
 *         return (self.const_lin is not NULL)
 * 
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):             # <<<<<<<<<<<<<<
 *         if op == Py_EQ:
 *             return self.lin==y.lin
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3IPO_IPOLinearConstraint, 1, "self", 0))) __PYX_ERR(0, 170, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_3IPO_IPOLinearConstraint, 0, "y", 0))) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_6__richcmp__(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_6__richcmp__(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "IPO.pyx":171
 * 
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return self.lin==y.lin
 *         elif op == Py_LT:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":172
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):
 *         if op == Py_EQ:
 *             return self.lin==y.lin             # <<<<<<<<<<<<<<
 *         elif op == Py_LT:
 *             return self.lin<y.lin
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->lin == __pyx_v_y->lin)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":171
 * 
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return self.lin==y.lin
 *         elif op == Py_LT:
 */
  }

  /* "IPO.pyx":173
 *         if op == Py_EQ:
 *             return self.lin==y.lin
 *         elif op == Py_LT:             # <<<<<<<<<<<<<<
 *             return self.lin<y.lin
 * 
 */
  __pyx_t_1 = ((__pyx_v_op == Py_LT) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":174
 *             return self.lin==y.lin
 *         elif op == Py_LT:
 *             return self.lin<y.lin             # <<<<<<<<<<<<<<
 * 
 *     def isEquation(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->lin < __pyx_v_y->lin)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":173
 *         if op == Py_EQ:
 *             return self.lin==y.lin
 *         elif op == Py_LT:             # <<<<<<<<<<<<<<
 *             return self.lin<y.lin
 * 
 */
  }

  /* "IPO.pyx":170
 *         return (self.const_lin is not NULL)
 * 
 *     def __richcmp__(IPOLinearConstraint self, IPOLinearConstraint y not None, int op):             # <<<<<<<<<<<<<<
 *         if op == Py_EQ:
 *             return self.lin==y.lin
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":176
 *             return self.lin<y.lin
 * 
 *     def isEquation(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.isEquation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_9isEquation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_9isEquation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isEquation (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_8isEquation(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_8isEquation(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isEquation", 0);

  /* "IPO.pyx":177
 * 
 *     def isEquation(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.isEquation()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":178
 *     def isEquation(self):
 *         if(self.lin is not NULL):
 *             return self.lin.isEquation()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_lin.isEquation()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->lin->isEquation()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":177
 * 
 *     def isEquation(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.isEquation()
 *         else:
 */
  }

  /* "IPO.pyx":180
 *             return self.lin.isEquation()
 *         else:
 *             return self.const_lin.isEquation()             # <<<<<<<<<<<<<<
 * 
 *     def type(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->const_lin->isEquation()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":176
 *             return self.lin<y.lin
 * 
 *     def isEquation(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.isEquation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.isEquation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":182
 *             return self.const_lin.isEquation()
 * 
 *     def type(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.type()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_11type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_11type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_10type(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_10type(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("type", 0);

  /* "IPO.pyx":183
 * 
 *     def type(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.type()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":184
 *     def type(self):
 *         if(self.lin is not NULL):
 *             return self.lin.type()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_lin.type()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_char(__pyx_v_self->lin->type()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":183
 * 
 *     def type(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.type()
 *         else:
 */
  }

  /* "IPO.pyx":186
 *             return self.lin.type()
 *         else:
 *             return self.const_lin.type()             # <<<<<<<<<<<<<<
 * 
 *     def normal(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_char(__pyx_v_self->const_lin->type()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":182
 *             return self.const_lin.isEquation()
 * 
 *     def type(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":188
 *             return self.const_lin.type()
 * 
 *     def normal(self):             # <<<<<<<<<<<<<<
 *         cdef const cppIPO.Vector *c_vector
 *         if(self.lin is not NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_13normal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_13normal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normal (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_12normal(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_12normal(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  ipo::Vector const *__pyx_v_c_vector;
  PyObject *__pyx_v_py_vector = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("normal", 0);

  /* "IPO.pyx":190
 *     def normal(self):
 *         cdef const cppIPO.Vector *c_vector
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             c_vector = ref(self.lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":191
 *         cdef const cppIPO.Vector *c_vector
 *         if(self.lin is not NULL):
 *             c_vector = ref(self.lin.normal())             # <<<<<<<<<<<<<<
 *             py_vector = CreateConstIPOVector(c_vector)
 *             return py_vector
 */
    __pyx_v_c_vector = (&__pyx_v_self->lin->normal());

    /* "IPO.pyx":192
 *         if(self.lin is not NULL):
 *             c_vector = ref(self.lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)             # <<<<<<<<<<<<<<
 *             return py_vector
 *         else:
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateConstIPOVector(__pyx_v_c_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_vector = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "IPO.pyx":193
 *             c_vector = ref(self.lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)
 *             return py_vector             # <<<<<<<<<<<<<<
 *         else:
 *             c_vector = ref(self.const_lin.normal())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_py_vector);
    __pyx_r = __pyx_v_py_vector;
    goto __pyx_L0;

    /* "IPO.pyx":190
 *     def normal(self):
 *         cdef const cppIPO.Vector *c_vector
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             c_vector = ref(self.lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)
 */
  }

  /* "IPO.pyx":195
 *             return py_vector
 *         else:
 *             c_vector = ref(self.const_lin.normal())             # <<<<<<<<<<<<<<
 *             py_vector = CreateConstIPOVector(c_vector)
 *             return py_vector
 */
  /*else*/ {
    __pyx_v_c_vector = (&__pyx_v_self->const_lin->normal());

    /* "IPO.pyx":196
 *         else:
 *             c_vector = ref(self.const_lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)             # <<<<<<<<<<<<<<
 *             return py_vector
 * 
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateConstIPOVector(__pyx_v_c_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_vector = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "IPO.pyx":197
 *             c_vector = ref(self.const_lin.normal())
 *             py_vector = CreateConstIPOVector(c_vector)
 *             return py_vector             # <<<<<<<<<<<<<<
 * 
 *     def rhs(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_py_vector);
    __pyx_r = __pyx_v_py_vector;
    goto __pyx_L0;
  }

  /* "IPO.pyx":188
 *             return self.const_lin.type()
 * 
 *     def normal(self):             # <<<<<<<<<<<<<<
 *         cdef const cppIPO.Vector *c_vector
 *         if(self.lin is not NULL):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_vector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":199
 *             return py_vector
 * 
 *     def rhs(self):             # <<<<<<<<<<<<<<
 *         cdef const cppIPO.Rational *rational
 *         if(self.lin is not NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_15rhs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_15rhs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rhs (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_14rhs(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_14rhs(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  soplex::Rational const *__pyx_v_rational;
  PyObject *__pyx_v_py_rational = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("rhs", 0);

  /* "IPO.pyx":201
 *     def rhs(self):
 *         cdef const cppIPO.Rational *rational
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             rational = ref(self.lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":202
 *         cdef const cppIPO.Rational *rational
 *         if(self.lin is not NULL):
 *             rational = ref(self.lin.rhs())             # <<<<<<<<<<<<<<
 *             py_rational = CreateConstSoplexRational(rational)
 *             return py_rational
 */
    __pyx_v_rational = (&__pyx_v_self->lin->rhs());

    /* "IPO.pyx":203
 *         if(self.lin is not NULL):
 *             rational = ref(self.lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)             # <<<<<<<<<<<<<<
 *             return py_rational
 *         else:
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateConstSoplexRational(__pyx_v_rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_rational = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "IPO.pyx":204
 *             rational = ref(self.lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)
 *             return py_rational             # <<<<<<<<<<<<<<
 *         else:
 *             rational = ref(self.const_lin.rhs())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_py_rational);
    __pyx_r = __pyx_v_py_rational;
    goto __pyx_L0;

    /* "IPO.pyx":201
 *     def rhs(self):
 *         cdef const cppIPO.Rational *rational
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             rational = ref(self.lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)
 */
  }

  /* "IPO.pyx":206
 *             return py_rational
 *         else:
 *             rational = ref(self.const_lin.rhs())             # <<<<<<<<<<<<<<
 *             py_rational = CreateConstSoplexRational(rational)
 *             return py_rational
 */
  /*else*/ {
    __pyx_v_rational = (&__pyx_v_self->const_lin->rhs());

    /* "IPO.pyx":207
 *         else:
 *             rational = ref(self.const_lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)             # <<<<<<<<<<<<<<
 *             return py_rational
 * 
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateConstSoplexRational(__pyx_v_rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_rational = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "IPO.pyx":208
 *             rational = ref(self.const_lin.rhs())
 *             py_rational = CreateConstSoplexRational(rational)
 *             return py_rational             # <<<<<<<<<<<<<<
 * 
 *     def getMaximumNorm(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_py_rational);
    __pyx_r = __pyx_v_py_rational;
    goto __pyx_L0;
  }

  /* "IPO.pyx":199
 *             return py_vector
 * 
 *     def rhs(self):             # <<<<<<<<<<<<<<
 *         cdef const cppIPO.Rational *rational
 *         if(self.lin is not NULL):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.rhs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_rational);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":210
 *             return py_rational
 * 
 *     def getMaximumNorm(self):             # <<<<<<<<<<<<<<
 *         cdef cppIPO.Rational *rational
 *         #if(self.lin is not NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_17getMaximumNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_17getMaximumNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaximumNorm (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_16getMaximumNorm(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_16getMaximumNorm(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaximumNorm", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":221
 *             #return py_rational
 * 
 *     def definesCompleteFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesCompleteFace()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_19definesCompleteFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_19definesCompleteFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("definesCompleteFace (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_18definesCompleteFace(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_18definesCompleteFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("definesCompleteFace", 0);

  /* "IPO.pyx":222
 * 
 *     def definesCompleteFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesCompleteFace()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":223
 *     def definesCompleteFace(self):
 *         if(self.lin is not NULL):
 *             return self.lin.definesCompleteFace()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_lin.definesCompleteFace()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->lin->definesCompleteFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":222
 * 
 *     def definesCompleteFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesCompleteFace()
 *         else:
 */
  }

  /* "IPO.pyx":225
 *             return self.lin.definesCompleteFace()
 *         else:
 *             return self.const_lin.definesCompleteFace()             # <<<<<<<<<<<<<<
 * 
 *     def definesEmptyFace(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->const_lin->definesCompleteFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":221
 *             #return py_rational
 * 
 *     def definesCompleteFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesCompleteFace()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.definesCompleteFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":227
 *             return self.const_lin.definesCompleteFace()
 * 
 *     def definesEmptyFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesEmptyFace()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_21definesEmptyFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_21definesEmptyFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("definesEmptyFace (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_20definesEmptyFace(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_20definesEmptyFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("definesEmptyFace", 0);

  /* "IPO.pyx":228
 * 
 *     def definesEmptyFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesEmptyFace()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":229
 *     def definesEmptyFace(self):
 *         if(self.lin is not NULL):
 *             return self.lin.definesEmptyFace()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_lin.definesEmptyFace()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->lin->definesEmptyFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":228
 * 
 *     def definesEmptyFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesEmptyFace()
 *         else:
 */
  }

  /* "IPO.pyx":231
 *             return self.lin.definesEmptyFace()
 *         else:
 *             return self.const_lin.definesEmptyFace()             # <<<<<<<<<<<<<<
 * 
 *     def definesTrivialFace(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->const_lin->definesEmptyFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":227
 *             return self.const_lin.definesCompleteFace()
 * 
 *     def definesEmptyFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesEmptyFace()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.definesEmptyFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":233
 *             return self.const_lin.definesEmptyFace()
 * 
 *     def definesTrivialFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesTrivialFace()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_23definesTrivialFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_23definesTrivialFace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("definesTrivialFace (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_22definesTrivialFace(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_22definesTrivialFace(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("definesTrivialFace", 0);

  /* "IPO.pyx":234
 * 
 *     def definesTrivialFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesTrivialFace()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->lin != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":235
 *     def definesTrivialFace(self):
 *         if(self.lin is not NULL):
 *             return self.lin.definesTrivialFace()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_lin.definesTrivialFace()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->lin->definesTrivialFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":234
 * 
 *     def definesTrivialFace(self):
 *         if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *             return self.lin.definesTrivialFace()
 *         else:
 */
  }

  /* "IPO.pyx":237
 *             return self.lin.definesTrivialFace()
 *         else:
 *             return self.const_lin.definesTrivialFace()             # <<<<<<<<<<<<<<
 * 
 *     def evaluatePoint(self, IPOVector point):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->const_lin->definesTrivialFace()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":233
 *             return self.const_lin.definesEmptyFace()
 * 
 *     def definesTrivialFace(self):             # <<<<<<<<<<<<<<
 *         if(self.lin is not NULL):
 *             return self.lin.definesTrivialFace()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.definesTrivialFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":239
 *             return self.const_lin.definesTrivialFace()
 * 
 *     def evaluatePoint(self, IPOVector point):             # <<<<<<<<<<<<<<
 *         if (point.isConstant()):
 *             if(self.lin is not NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_25evaluatePoint(PyObject *__pyx_v_self, PyObject *__pyx_v_point); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_25evaluatePoint(PyObject *__pyx_v_self, PyObject *__pyx_v_point) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluatePoint (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point), __pyx_ptype_3IPO_IPOVector, 1, "point", 0))) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_24evaluatePoint(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_point));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_24evaluatePoint(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_point) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("evaluatePoint", 0);

  /* "IPO.pyx":240
 * 
 *     def evaluatePoint(self, IPOVector point):
 *         if (point.isConstant()):             # <<<<<<<<<<<<<<
 *             if(self.lin is not NULL):
 *                 return self.lin.evaluatePoint(deref(point.const_vec))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_point), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "IPO.pyx":241
 *     def evaluatePoint(self, IPOVector point):
 *         if (point.isConstant()):
 *             if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *                 return self.lin.evaluatePoint(deref(point.const_vec))
 *             else:
 */
    __pyx_t_4 = ((__pyx_v_self->lin != NULL) != 0);
    if (__pyx_t_4) {

      /* "IPO.pyx":242
 *         if (point.isConstant()):
 *             if(self.lin is not NULL):
 *                 return self.lin.evaluatePoint(deref(point.const_vec))             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.const_lin.evaluatePoint(deref(point.const_vec))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->lin->evaluatePoint((*__pyx_v_point->const_vec))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "IPO.pyx":241
 *     def evaluatePoint(self, IPOVector point):
 *         if (point.isConstant()):
 *             if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *                 return self.lin.evaluatePoint(deref(point.const_vec))
 *             else:
 */
    }

    /* "IPO.pyx":244
 *                 return self.lin.evaluatePoint(deref(point.const_vec))
 *             else:
 *                 return self.const_lin.evaluatePoint(deref(point.const_vec))             # <<<<<<<<<<<<<<
 *         else:
 *             raise NonConstError('IPOVector')
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->const_lin->evaluatePoint((*__pyx_v_point->const_vec))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "IPO.pyx":240
 * 
 *     def evaluatePoint(self, IPOVector point):
 *         if (point.isConstant()):             # <<<<<<<<<<<<<<
 *             if(self.lin is not NULL):
 *                 return self.lin.evaluatePoint(deref(point.const_vec))
 */
  }

  /* "IPO.pyx":246
 *                 return self.const_lin.evaluatePoint(deref(point.const_vec))
 *         else:
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 * 
 *     def evaluateRay(self, IPOVector ray):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonConstError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 246, __pyx_L1_error)
  }

  /* "IPO.pyx":239
 *             return self.const_lin.definesTrivialFace()
 * 
 *     def evaluatePoint(self, IPOVector point):             # <<<<<<<<<<<<<<
 *         if (point.isConstant()):
 *             if(self.lin is not NULL):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.evaluatePoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":248
 *             raise NonConstError('IPOVector')
 * 
 *     def evaluateRay(self, IPOVector ray):             # <<<<<<<<<<<<<<
 *         if (ray.isConstant()):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_27evaluateRay(PyObject *__pyx_v_self, PyObject *__pyx_v_ray); /*proto*/
static PyObject *__pyx_pw_3IPO_19IPOLinearConstraint_27evaluateRay(PyObject *__pyx_v_self, PyObject *__pyx_v_ray) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluateRay (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ray), __pyx_ptype_3IPO_IPOVector, 1, "ray", 0))) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_19IPOLinearConstraint_26evaluateRay(((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_ray));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_19IPOLinearConstraint_26evaluateRay(struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_ray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("evaluateRay", 0);

  /* "IPO.pyx":249
 * 
 *     def evaluateRay(self, IPOVector ray):
 *         if (ray.isConstant()):             # <<<<<<<<<<<<<<
 * 
 *             if(self.lin is not NULL):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ray), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "IPO.pyx":251
 *         if (ray.isConstant()):
 * 
 *             if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *                 return self.lin.evaluateRay(deref(ray.const_vec))
 *             else:
 */
    __pyx_t_4 = ((__pyx_v_self->lin != NULL) != 0);
    if (__pyx_t_4) {

      /* "IPO.pyx":252
 * 
 *             if(self.lin is not NULL):
 *                 return self.lin.evaluateRay(deref(ray.const_vec))             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.const_lin.evaluateRay(deref(ray.const_vec))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->lin->evaluateRay((*__pyx_v_ray->const_vec))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "IPO.pyx":251
 *         if (ray.isConstant()):
 * 
 *             if(self.lin is not NULL):             # <<<<<<<<<<<<<<
 *                 return self.lin.evaluateRay(deref(ray.const_vec))
 *             else:
 */
    }

    /* "IPO.pyx":254
 *                 return self.lin.evaluateRay(deref(ray.const_vec))
 *             else:
 *                 return self.const_lin.evaluateRay(deref(ray.const_vec))             # <<<<<<<<<<<<<<
 *         else:
 *             raise NonConstError('IPOVector')
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->const_lin->evaluateRay((*__pyx_v_ray->const_vec))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "IPO.pyx":249
 * 
 *     def evaluateRay(self, IPOVector ray):
 *         if (ray.isConstant()):             # <<<<<<<<<<<<<<
 * 
 *             if(self.lin is not NULL):
 */
  }

  /* "IPO.pyx":256
 *                 return self.const_lin.evaluateRay(deref(ray.const_vec))
 *         else:
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonConstError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 256, __pyx_L1_error)
  }

  /* "IPO.pyx":248
 *             raise NonConstError('IPOVector')
 * 
 *     def evaluateRay(self, IPOVector ray):             # <<<<<<<<<<<<<<
 *         if (ray.isConstant()):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOLinearConstraint.evaluateRay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":258
 *             raise NonConstError('IPOVector')
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):             # <<<<<<<<<<<<<<
 *     py_linconst = IPOLinearConstraint(False)
 *     py_linconst.lin = linconst
 */

static PyObject *__pyx_f_3IPO_CreateLinearConstraint(ipo::LinearConstraint *__pyx_v_linconst) {
  struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_py_linconst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateLinearConstraint", 0);

  /* "IPO.pyx":259
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(False)             # <<<<<<<<<<<<<<
 *     py_linconst.lin = linconst
 *     return py_linconst
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOLinearConstraint), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_linconst = ((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":260
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(False)
 *     py_linconst.lin = linconst             # <<<<<<<<<<<<<<
 *     return py_linconst
 * 
 */
  __pyx_v_py_linconst->lin = __pyx_v_linconst;

  /* "IPO.pyx":261
 *     py_linconst = IPOLinearConstraint(False)
 *     py_linconst.lin = linconst
 *     return py_linconst             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_linconst));
  __pyx_r = ((PyObject *)__pyx_v_py_linconst);
  goto __pyx_L0;

  /* "IPO.pyx":258
 *             raise NonConstError('IPOVector')
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):             # <<<<<<<<<<<<<<
 *     py_linconst = IPOLinearConstraint(False)
 *     py_linconst.lin = linconst
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateLinearConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_linconst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":263
 *     return py_linconst
 * 
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):             # <<<<<<<<<<<<<<
 *     py_linconst = IPOLinearConstraint(True)
 *     py_linconst.const_lin = linconst
 */

static PyObject *__pyx_f_3IPO_CreateConstLinearConstraint(ipo::LinearConstraint const *__pyx_v_linconst) {
  struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_py_linconst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateConstLinearConstraint", 0);

  /* "IPO.pyx":264
 * 
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(True)             # <<<<<<<<<<<<<<
 *     py_linconst.const_lin = linconst
 *     return py_linconst
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOLinearConstraint), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_linconst = ((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":265
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(True)
 *     py_linconst.const_lin = linconst             # <<<<<<<<<<<<<<
 *     return py_linconst
 * 
 */
  __pyx_v_py_linconst->const_lin = __pyx_v_linconst;

  /* "IPO.pyx":266
 *     py_linconst = IPOLinearConstraint(True)
 *     py_linconst.const_lin = linconst
 *     return py_linconst             # <<<<<<<<<<<<<<
 * 
 * ####################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_linconst));
  __pyx_r = ((PyObject *)__pyx_v_py_linconst);
  goto __pyx_L0;

  /* "IPO.pyx":263
 *     return py_linconst
 * 
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):             # <<<<<<<<<<<<<<
 *     py_linconst = IPOLinearConstraint(True)
 *     py_linconst.const_lin = linconst
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateConstLinearConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_linconst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":272
 * 
 * cdef class IPOInnerDescription:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.points = []
 *         self.rays = []
 */

/* Python wrapper */
static int __pyx_pw_3IPO_19IPOInnerDescription_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_19IPOInnerDescription_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_3IPO_19IPOInnerDescription___init__(((struct __pyx_obj_3IPO_IPOInnerDescription *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_19IPOInnerDescription___init__(struct __pyx_obj_3IPO_IPOInnerDescription *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "IPO.pyx":273
 * cdef class IPOInnerDescription:
 *     def __init__(self):
 *         self.points = []             # <<<<<<<<<<<<<<
 *         self.rays = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_points, __pyx_t_1) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":274
 *     def __init__(self):
 *         self.points = []
 *         self.rays = []             # <<<<<<<<<<<<<<
 * 
 * cdef class IPOAffineOuterDescription:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rays, __pyx_t_1) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":272
 * 
 * cdef class IPOInnerDescription:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.points = []
 *         self.rays = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOInnerDescription.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":277
 * 
 * cdef class IPOAffineOuterDescription:
 *     def __init__(self, cons):             # <<<<<<<<<<<<<<
 *         self.constraints = []
 * 
 */

/* Python wrapper */
static int __pyx_pw_3IPO_25IPOAffineOuterDescription_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_25IPOAffineOuterDescription_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_cons = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cons,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cons)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_cons = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOAffineOuterDescription.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_25IPOAffineOuterDescription___init__(((struct __pyx_obj_3IPO_IPOAffineOuterDescription *)__pyx_v_self), __pyx_v_cons);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_25IPOAffineOuterDescription___init__(struct __pyx_obj_3IPO_IPOAffineOuterDescription *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_cons) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "IPO.pyx":278
 * cdef class IPOAffineOuterDescription:
 *     def __init__(self, cons):
 *         self.constraints = []             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_constraints, __pyx_t_1) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":277
 * 
 * cdef class IPOAffineOuterDescription:
 *     def __init__(self, cons):             # <<<<<<<<<<<<<<
 *         self.constraints = []
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOAffineOuterDescription.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":288
 *     cdef const cppIPO.Space *const_space
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(isConst is False):
 *             self.cpp_space = new cppIPO.Space()
 */

/* Python wrapper */
static int __pyx_pw_3IPO_8IPOSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_8IPOSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isConst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isConst,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isConst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 288, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_isConst = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 288, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOSpace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_8IPOSpace___cinit__(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), __pyx_v_isConst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_8IPOSpace___cinit__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, PyObject *__pyx_v_isConst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  ipo::Space *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":289
 * 
 *     def __cinit__(self, isConst):
 *         if(isConst is False):             # <<<<<<<<<<<<<<
 *             self.cpp_space = new cppIPO.Space()
 *             if self.cpp_space is NULL:
 */
  __pyx_t_1 = (__pyx_v_isConst == Py_False);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "IPO.pyx":290
 *     def __cinit__(self, isConst):
 *         if(isConst is False):
 *             self.cpp_space = new cppIPO.Space()             # <<<<<<<<<<<<<<
 *             if self.cpp_space is NULL:
 *                 raise MemoryError()
 */
    try {
      __pyx_t_3 = new ipo::Space();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 290, __pyx_L1_error)
    }
    __pyx_v_self->cpp_space = __pyx_t_3;

    /* "IPO.pyx":291
 *         if(isConst is False):
 *             self.cpp_space = new cppIPO.Space()
 *             if self.cpp_space is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 * 
 */
    __pyx_t_2 = ((__pyx_v_self->cpp_space == NULL) != 0);
    if (__pyx_t_2) {

      /* "IPO.pyx":292
 *             self.cpp_space = new cppIPO.Space()
 *             if self.cpp_space is NULL:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      PyErr_NoMemory(); __PYX_ERR(0, 292, __pyx_L1_error)

      /* "IPO.pyx":291
 *         if(isConst is False):
 *             self.cpp_space = new cppIPO.Space()
 *             if self.cpp_space is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 * 
 */
    }

    /* "IPO.pyx":289
 * 
 *     def __cinit__(self, isConst):
 *         if(isConst is False):             # <<<<<<<<<<<<<<
 *             self.cpp_space = new cppIPO.Space()
 *             if self.cpp_space is NULL:
 */
  }

  /* "IPO.pyx":288
 *     cdef const cppIPO.Space *const_space
 * 
 *     def __cinit__(self, isConst):             # <<<<<<<<<<<<<<
 *         if(isConst is False):
 *             self.cpp_space = new cppIPO.Space()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.IPOSpace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":294
 *                 raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             del self.cpp_space
 */

/* Python wrapper */
static void __pyx_pw_3IPO_8IPOSpace_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_8IPOSpace_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_8IPOSpace_2__dealloc__(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_8IPOSpace_2__dealloc__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":295
 * 
 *     def __dealloc__(self):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             del self.cpp_space
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->cpp_space != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":296
 *     def __dealloc__(self):
 *         if(self.cpp_space is not NULL):
 *             del self.cpp_space             # <<<<<<<<<<<<<<
 *         else:
 *             del self.const_space
 */
    delete __pyx_v_self->cpp_space;

    /* "IPO.pyx":295
 * 
 *     def __dealloc__(self):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             del self.cpp_space
 *         else:
 */
    goto __pyx_L3;
  }

  /* "IPO.pyx":298
 *             del self.cpp_space
 *         else:
 *             del self.const_space             # <<<<<<<<<<<<<<
 * 
 *     def isConstant(self):
 */
  /*else*/ {
    delete __pyx_v_self->const_space;
  }
  __pyx_L3:;

  /* "IPO.pyx":294
 *                 raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             del self.cpp_space
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":300
 *             del self.const_space
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.const_space is not NULL)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_5isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_5isConstant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConstant (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_4isConstant(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_4isConstant(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isConstant", 0);

  /* "IPO.pyx":301
 * 
 *     def isConstant(self):
 *         return (self.const_space is not NULL)             # <<<<<<<<<<<<<<
 * 
 *     def dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->const_space != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":300
 *             del self.const_space
 * 
 *     def isConstant(self):             # <<<<<<<<<<<<<<
 *         return (self.const_space is not NULL)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOSpace.isConstant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":303
 *         return (self.const_space is not NULL)
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             return self.cpp_space.dimension()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_7dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_7dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_6dimension(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_6dimension(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dimension", 0);

  /* "IPO.pyx":304
 * 
 *     def dimension(self):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             return self.cpp_space.dimension()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->cpp_space != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":305
 *     def dimension(self):
 *         if(self.cpp_space is not NULL):
 *             return self.cpp_space.dimension()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.const_space.dimension()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cpp_space->dimension()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "IPO.pyx":304
 * 
 *     def dimension(self):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             return self.cpp_space.dimension()
 *         else:
 */
  }

  /* "IPO.pyx":307
 *             return self.cpp_space.dimension()
 *         else:
 *             return self.const_space.dimension()             # <<<<<<<<<<<<<<
 * 
 *     def printVector(self, stream, IPOVector vector):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->const_space->dimension()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "IPO.pyx":303
 *         return (self.const_space is not NULL)
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             return self.cpp_space.dimension()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.IPOSpace.dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":309
 *             return self.const_space.dimension()
 * 
 *     def printVector(self, stream, IPOVector vector):             # <<<<<<<<<<<<<<
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_9printVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_9printVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  struct __pyx_obj_3IPO_IPOVector *__pyx_v_vector = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printVector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,&__pyx_n_s_vector,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("printVector", 1, 2, 2, 1); __PYX_ERR(0, 309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "printVector") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_stream = values[0];
    __pyx_v_vector = ((struct __pyx_obj_3IPO_IPOVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("printVector", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOSpace.printVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vector), __pyx_ptype_3IPO_IPOVector, 1, "vector", 0))) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_8printVector(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), __pyx_v_stream, __pyx_v_vector);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_8printVector(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, PyObject *__pyx_v_stream, struct __pyx_obj_3IPO_IPOVector *__pyx_v_vector) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("printVector", 0);

  /* "IPO.pyx":310
 * 
 *     def printVector(self, stream, IPOVector vector):
 *         if (not vector.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOVector')
 *     #cout, cerr, clog are ostreams
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vector), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "IPO.pyx":311
 *     def printVector(self, stream, IPOVector vector):
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 *     #cout, cerr, clog are ostreams
 *         if stream == "cout":
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonConstError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 311, __pyx_L1_error)

    /* "IPO.pyx":310
 * 
 *     def printVector(self, stream, IPOVector vector):
 *         if (not vector.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOVector')
 *     #cout, cerr, clog are ostreams
 */
  }

  /* "IPO.pyx":313
 *             raise NonConstError('IPOVector')
 *     #cout, cerr, clog are ostreams
 *         if stream == "cout":             # <<<<<<<<<<<<<<
 *             #call function with cout
 *             print("debug")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_stream, __pyx_n_s_cout, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "IPO.pyx":315
 *         if stream == "cout":
 *             #call function with cout
 *             print("debug")             # <<<<<<<<<<<<<<
 *         elif stream == "cerr":
 *             #call function with cerr
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_debug) < 0) __PYX_ERR(0, 315, __pyx_L1_error)

    /* "IPO.pyx":313
 *             raise NonConstError('IPOVector')
 *     #cout, cerr, clog are ostreams
 *         if stream == "cout":             # <<<<<<<<<<<<<<
 *             #call function with cout
 *             print("debug")
 */
    goto __pyx_L4;
  }

  /* "IPO.pyx":316
 *             #call function with cout
 *             print("debug")
 *         elif stream == "cerr":             # <<<<<<<<<<<<<<
 *             #call function with cerr
 *             print("debug")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_stream, __pyx_n_s_cerr, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 316, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "IPO.pyx":318
 *         elif stream == "cerr":
 *             #call function with cerr
 *             print("debug")             # <<<<<<<<<<<<<<
 *         elif stream == "clog":
 *             #call function with clog
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_debug) < 0) __PYX_ERR(0, 318, __pyx_L1_error)

    /* "IPO.pyx":316
 *             #call function with cout
 *             print("debug")
 *         elif stream == "cerr":             # <<<<<<<<<<<<<<
 *             #call function with cerr
 *             print("debug")
 */
    goto __pyx_L4;
  }

  /* "IPO.pyx":319
 *             #call function with cerr
 *             print("debug")
 *         elif stream == "clog":             # <<<<<<<<<<<<<<
 *             #call function with clog
 *             print("debug")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_stream, __pyx_n_s_clog, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 319, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "IPO.pyx":321
 *         elif stream == "clog":
 *             #call function with clog
 *             print("debug")             # <<<<<<<<<<<<<<
 * 
 *     def printLinearForm(self, IPOVector vector):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_debug) < 0) __PYX_ERR(0, 321, __pyx_L1_error)

    /* "IPO.pyx":319
 *             #call function with cerr
 *             print("debug")
 *         elif stream == "clog":             # <<<<<<<<<<<<<<
 *             #call function with clog
 *             print("debug")
 */
  }
  __pyx_L4:;

  /* "IPO.pyx":309
 *             return self.const_space.dimension()
 * 
 *     def printVector(self, stream, IPOVector vector):             # <<<<<<<<<<<<<<
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOSpace.printVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":323
 *             print("debug")
 * 
 *     def printLinearForm(self, IPOVector vector):             # <<<<<<<<<<<<<<
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_11printLinearForm(PyObject *__pyx_v_self, PyObject *__pyx_v_vector); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_11printLinearForm(PyObject *__pyx_v_self, PyObject *__pyx_v_vector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printLinearForm (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vector), __pyx_ptype_3IPO_IPOVector, 1, "vector", 0))) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_10printLinearForm(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOVector *)__pyx_v_vector));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_10printLinearForm(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOVector *__pyx_v_vector) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("printLinearForm", 0);

  /* "IPO.pyx":324
 * 
 *     def printLinearForm(self, IPOVector vector):
 *         if (not vector.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOVector')
 *         print("lin")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vector), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "IPO.pyx":325
 *     def printLinearForm(self, IPOVector vector):
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 *         print("lin")
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonConstError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 325, __pyx_L1_error)

    /* "IPO.pyx":324
 * 
 *     def printLinearForm(self, IPOVector vector):
 *         if (not vector.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOVector')
 *         print("lin")
 */
  }

  /* "IPO.pyx":326
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')
 *         print("lin")             # <<<<<<<<<<<<<<
 * 
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_lin) < 0) __PYX_ERR(0, 326, __pyx_L1_error)

  /* "IPO.pyx":323
 *             print("debug")
 * 
 *     def printLinearForm(self, IPOVector vector):             # <<<<<<<<<<<<<<
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOSpace.printLinearForm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":328
 *         print("lin")
 * 
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):             # <<<<<<<<<<<<<<
 *         if (not lincons.isConstant()):
 *             raise NonConstError('IPOLinearConstraint')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_13printLinearConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_lincons); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_13printLinearConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_lincons) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printLinearConstraint (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lincons), __pyx_ptype_3IPO_IPOLinearConstraint, 1, "lincons", 0))) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_12printLinearConstraint(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOLinearConstraint *)__pyx_v_lincons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_12printLinearConstraint(CYTHON_UNUSED struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOLinearConstraint *__pyx_v_lincons) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("printLinearConstraint", 0);

  /* "IPO.pyx":329
 * 
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):
 *         if (not lincons.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOLinearConstraint')
 *         print("cons")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lincons), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "IPO.pyx":330
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):
 *         if (not lincons.isConstant()):
 *             raise NonConstError('IPOLinearConstraint')             # <<<<<<<<<<<<<<
 *         print("cons")
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonConstError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 330, __pyx_L1_error)

    /* "IPO.pyx":329
 * 
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):
 *         if (not lincons.isConstant()):             # <<<<<<<<<<<<<<
 *             raise NonConstError('IPOLinearConstraint')
 *         print("cons")
 */
  }

  /* "IPO.pyx":331
 *         if (not lincons.isConstant()):
 *             raise NonConstError('IPOLinearConstraint')
 *         print("cons")             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int key):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_cons) < 0) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "IPO.pyx":328
 *         print("lin")
 * 
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):             # <<<<<<<<<<<<<<
 *         if (not lincons.isConstant()):
 *             raise NonConstError('IPOLinearConstraint')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IPO.IPOSpace.printLinearConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":333
 *         print("cons")
 * 
 *     def __getitem__(self, int key):             # <<<<<<<<<<<<<<
 *         if type(key) is int:
 *             if(self.cpp_space is not NULL):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
  int __pyx_v_key;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_As_int(__pyx_arg_key); if (unlikely((__pyx_v_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOSpace.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_14__getitem__(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), ((int)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_14__getitem__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, int __pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "IPO.pyx":334
 * 
 *     def __getitem__(self, int key):
 *         if type(key) is int:             # <<<<<<<<<<<<<<
 *             if(self.cpp_space is not NULL):
 *                 return deref(self.cpp_space)[key]
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_t_1)) == ((PyObject *)(&PyInt_Type)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "IPO.pyx":335
 *     def __getitem__(self, int key):
 *         if type(key) is int:
 *             if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *                 return deref(self.cpp_space)[key]
 *             else:
 */
    __pyx_t_3 = ((__pyx_v_self->cpp_space != NULL) != 0);
    if (__pyx_t_3) {

      /* "IPO.pyx":336
 *         if type(key) is int:
 *             if(self.cpp_space is not NULL):
 *                 return deref(self.cpp_space)[key]             # <<<<<<<<<<<<<<
 *             else:
 *                 return deref(self.const_space)[key]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(((*__pyx_v_self->cpp_space)[__pyx_v_key])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "IPO.pyx":335
 *     def __getitem__(self, int key):
 *         if type(key) is int:
 *             if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *                 return deref(self.cpp_space)[key]
 *             else:
 */
    }

    /* "IPO.pyx":338
 *                 return deref(self.cpp_space)[key]
 *             else:
 *                 return deref(self.const_space)[key]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError()
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(((*__pyx_v_self->const_space)[__pyx_v_key])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "IPO.pyx":334
 * 
 *     def __getitem__(self, int key):
 *         if type(key) is int:             # <<<<<<<<<<<<<<
 *             if(self.cpp_space is not NULL):
 *                 return deref(self.cpp_space)[key]
 */
  }

  /* "IPO.pyx":340
 *                 return deref(self.const_space)[key]
 *         else:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 340, __pyx_L1_error)
  }

  /* "IPO.pyx":333
 *         print("cons")
 * 
 *     def __getitem__(self, int key):             # <<<<<<<<<<<<<<
 *         if type(key) is int:
 *             if(self.cpp_space is not NULL):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOSpace.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":343
 * 
 * 
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_8IPOSpace_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_3IPO_8IPOSpace_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3IPO_IPOSpace, 1, "self", 0))) __PYX_ERR(0, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_3IPO_IPOSpace, 0, "y", 0))) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_8IPOSpace_16__richcmp__(((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_self), ((struct __pyx_obj_3IPO_IPOSpace *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_8IPOSpace_16__richcmp__(struct __pyx_obj_3IPO_IPOSpace *__pyx_v_self, struct __pyx_obj_3IPO_IPOSpace *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "IPO.pyx":344
 * 
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             if(y.isConstant()):
 *                 if op == Py_EQ:
 */
  __pyx_t_1 = ((__pyx_v_self->cpp_space != NULL) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":345
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):             # <<<<<<<<<<<<<<
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.const_space
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "IPO.pyx":346
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space==y.const_space
 *                 elif op == Py_NE:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":347
 *             if(y.isConstant()):
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.const_space             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return self.cpp_space!=y.const_space
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->cpp_space == __pyx_v_y->const_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":346
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space==y.const_space
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":348
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.const_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space!=y.const_space
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":349
 *                     return self.cpp_space==y.const_space
 *                 elif op == Py_NE:
 *                     return self.cpp_space!=y.const_space             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->cpp_space != __pyx_v_y->const_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":348
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.const_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space!=y.const_space
 *                 else:
 */
      }

      /* "IPO.pyx":351
 *                     return self.cpp_space!=y.const_space
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 *             else:
 *                 if op == Py_EQ:
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 351, __pyx_L1_error)
          }
        }
        #endif
      }

      /* "IPO.pyx":345
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):             # <<<<<<<<<<<<<<
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.const_space
 */
      goto __pyx_L4;
    }

    /* "IPO.pyx":353
 *                     assert False
 *             else:
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space==y.cpp_space
 *                 elif op == Py_NE:
 */
    /*else*/ {
      __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":354
 *             else:
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.cpp_space             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return self.cpp_space!=y.cpp_space
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->cpp_space == __pyx_v_y->cpp_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":353
 *                     assert False
 *             else:
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space==y.cpp_space
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":355
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.cpp_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space!=y.cpp_space
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":356
 *                     return self.cpp_space==y.cpp_space
 *                 elif op == Py_NE:
 *                     return self.cpp_space!=y.cpp_space             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->cpp_space != __pyx_v_y->cpp_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":355
 *                 if op == Py_EQ:
 *                     return self.cpp_space==y.cpp_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.cpp_space!=y.cpp_space
 *                 else:
 */
      }

      /* "IPO.pyx":358
 *                     return self.cpp_space!=y.cpp_space
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 *         else:
 *             if(y.isConstant()):
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 358, __pyx_L1_error)
          }
        }
        #endif
      }
    }
    __pyx_L4:;

    /* "IPO.pyx":344
 * 
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):
 *         if(self.cpp_space is not NULL):             # <<<<<<<<<<<<<<
 *             if(y.isConstant()):
 *                 if op == Py_EQ:
 */
    goto __pyx_L3;
  }

  /* "IPO.pyx":360
 *                     assert False
 *         else:
 *             if(y.isConstant()):             # <<<<<<<<<<<<<<
 *                 if op == Py_EQ:
 *                     return self.const_space==y.const_space
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_isConstant); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "IPO.pyx":361
 *         else:
 *             if(y.isConstant()):
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.const_space==y.const_space
 *                 elif op == Py_NE:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":362
 *             if(y.isConstant()):
 *                 if op == Py_EQ:
 *                     return self.const_space==y.const_space             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return self.const_space!=y.const_space
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->const_space == __pyx_v_y->const_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":361
 *         else:
 *             if(y.isConstant()):
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.const_space==y.const_space
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":363
 *                 if op == Py_EQ:
 *                     return self.const_space==y.const_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.const_space!=y.const_space
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":364
 *                     return self.const_space==y.const_space
 *                 elif op == Py_NE:
 *                     return self.const_space!=y.const_space             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->const_space != __pyx_v_y->const_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":363
 *                 if op == Py_EQ:
 *                     return self.const_space==y.const_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.const_space!=y.const_space
 *                 else:
 */
      }

      /* "IPO.pyx":366
 *                     return self.const_space!=y.const_space
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 *             else:
 *                 if op == Py_EQ:
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 366, __pyx_L1_error)
          }
        }
        #endif
      }

      /* "IPO.pyx":360
 *                     assert False
 *         else:
 *             if(y.isConstant()):             # <<<<<<<<<<<<<<
 *                 if op == Py_EQ:
 *                     return self.const_space==y.const_space
 */
      goto __pyx_L7;
    }

    /* "IPO.pyx":368
 *                     assert False
 *             else:
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.const_space==y.cpp_space
 *                 elif op == Py_NE:
 */
    /*else*/ {
      __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":369
 *             else:
 *                 if op == Py_EQ:
 *                     return self.const_space==y.cpp_space             # <<<<<<<<<<<<<<
 *                 elif op == Py_NE:
 *                     return self.const_space!=y.cpp_space
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->const_space == __pyx_v_y->cpp_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":368
 *                     assert False
 *             else:
 *                 if op == Py_EQ:             # <<<<<<<<<<<<<<
 *                     return self.const_space==y.cpp_space
 *                 elif op == Py_NE:
 */
      }

      /* "IPO.pyx":370
 *                 if op == Py_EQ:
 *                     return self.const_space==y.cpp_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.const_space!=y.cpp_space
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
      if (__pyx_t_1) {

        /* "IPO.pyx":371
 *                     return self.const_space==y.cpp_space
 *                 elif op == Py_NE:
 *                     return self.const_space!=y.cpp_space             # <<<<<<<<<<<<<<
 *                 else:
 *                     assert False
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->const_space != __pyx_v_y->cpp_space)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "IPO.pyx":370
 *                 if op == Py_EQ:
 *                     return self.const_space==y.cpp_space
 *                 elif op == Py_NE:             # <<<<<<<<<<<<<<
 *                     return self.const_space!=y.cpp_space
 *                 else:
 */
      }

      /* "IPO.pyx":373
 *                     return self.const_space!=y.cpp_space
 *                 else:
 *                     assert False             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateIPOSpace(cppIPO.Space *space):
 */
      /*else*/ {
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!0)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 373, __pyx_L1_error)
          }
        }
        #endif
      }
    }
    __pyx_L7:;
  }
  __pyx_L3:;

  /* "IPO.pyx":343
 * 
 * 
 *     def __richcmp__(IPOSpace self, IPOSpace y not None, int op):             # <<<<<<<<<<<<<<
 *         if(self.cpp_space is not NULL):
 *             if(y.isConstant()):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("IPO.IPOSpace.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":375
 *                     assert False
 * 
 * cdef object CreateIPOSpace(cppIPO.Space *space):             # <<<<<<<<<<<<<<
 *     py_space = IPOSpace(False)
 *     py_space.cpp_space = space
 */

static PyObject *__pyx_f_3IPO_CreateIPOSpace(ipo::Space *__pyx_v_space) {
  struct __pyx_obj_3IPO_IPOSpace *__pyx_v_py_space = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateIPOSpace", 0);

  /* "IPO.pyx":376
 * 
 * cdef object CreateIPOSpace(cppIPO.Space *space):
 *     py_space = IPOSpace(False)             # <<<<<<<<<<<<<<
 *     py_space.cpp_space = space
 *     return py_space
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOSpace), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_space = ((struct __pyx_obj_3IPO_IPOSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":377
 * cdef object CreateIPOSpace(cppIPO.Space *space):
 *     py_space = IPOSpace(False)
 *     py_space.cpp_space = space             # <<<<<<<<<<<<<<
 *     return py_space
 * 
 */
  __pyx_v_py_space->cpp_space = __pyx_v_space;

  /* "IPO.pyx":378
 *     py_space = IPOSpace(False)
 *     py_space.cpp_space = space
 *     return py_space             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_space));
  __pyx_r = ((PyObject *)__pyx_v_py_space);
  goto __pyx_L0;

  /* "IPO.pyx":375
 *                     assert False
 * 
 * cdef object CreateIPOSpace(cppIPO.Space *space):             # <<<<<<<<<<<<<<
 *     py_space = IPOSpace(False)
 *     py_space.cpp_space = space
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateIPOSpace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_space);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":380
 *     return py_space
 * 
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):             # <<<<<<<<<<<<<<
 *     py_space = IPOSpace(True)
 *     py_space.const_space = space
 */

static PyObject *__pyx_f_3IPO_CreateConstIPOSpace(ipo::Space const *__pyx_v_space) {
  struct __pyx_obj_3IPO_IPOSpace *__pyx_v_py_space = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CreateConstIPOSpace", 0);

  /* "IPO.pyx":381
 * 
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):
 *     py_space = IPOSpace(True)             # <<<<<<<<<<<<<<
 *     py_space.const_space = space
 *     return py_space
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOSpace), __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_space = ((struct __pyx_obj_3IPO_IPOSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IPO.pyx":382
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):
 *     py_space = IPOSpace(True)
 *     py_space.const_space = space             # <<<<<<<<<<<<<<
 *     return py_space
 * 
 */
  __pyx_v_py_space->const_space = __pyx_v_space;

  /* "IPO.pyx":383
 *     py_space = IPOSpace(True)
 *     py_space.const_space = space
 *     return py_space             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_space));
  __pyx_r = ((PyObject *)__pyx_v_py_space);
  goto __pyx_L0;

  /* "IPO.pyx":380
 *     return py_space
 * 
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):             # <<<<<<<<<<<<<<
 *     py_space = IPOSpace(True)
 *     py_space.const_space = space
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.CreateConstIPOSpace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_space);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":391
 *     cdef cppIPO.ScipOracleController *oracle
 * 
 *     def __cinit__(self, str name, int isNew):             # <<<<<<<<<<<<<<
 *         if(isNew == 1):
 *             self.oracle = new cppIPO.ScipOracleController(name)
 */

/* Python wrapper */
static int __pyx_pw_3IPO_13IPOScipOracle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_13IPOScipOracle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_v_isNew;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_isNew,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isNew)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_isNew = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_isNew == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("IPO.IPOScipOracle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_r = __pyx_pf_3IPO_13IPOScipOracle___cinit__(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self), __pyx_v_name, __pyx_v_isNew);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_13IPOScipOracle___cinit__(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_v_isNew) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  ipo::ScipOracleController *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":392
 * 
 *     def __cinit__(self, str name, int isNew):
 *         if(isNew == 1):             # <<<<<<<<<<<<<<
 *             self.oracle = new cppIPO.ScipOracleController(name)
 * 
 */
  __pyx_t_1 = ((__pyx_v_isNew == 1) != 0);
  if (__pyx_t_1) {

    /* "IPO.pyx":393
 *     def __cinit__(self, str name, int isNew):
 *         if(isNew == 1):
 *             self.oracle = new cppIPO.ScipOracleController(name)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
    try {
      __pyx_t_3 = new ipo::ScipOracleController(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 393, __pyx_L1_error)
    }
    __pyx_v_self->oracle = __pyx_t_3;

    /* "IPO.pyx":392
 * 
 *     def __cinit__(self, str name, int isNew):
 *         if(isNew == 1):             # <<<<<<<<<<<<<<
 *             self.oracle = new cppIPO.ScipOracleController(name)
 * 
 */
  }

  /* "IPO.pyx":391
 *     cdef cppIPO.ScipOracleController *oracle
 * 
 *     def __cinit__(self, str name, int isNew):             # <<<<<<<<<<<<<<
 *         if(isNew == 1):
 *             self.oracle = new cppIPO.ScipOracleController(name)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.IPOScipOracle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":395
 *             self.oracle = new cppIPO.ScipOracleController(name)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.oracle
 * 
 */

/* Python wrapper */
static void __pyx_pw_3IPO_13IPOScipOracle_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_13IPOScipOracle_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_13IPOScipOracle_2__dealloc__(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_13IPOScipOracle_2__dealloc__(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":396
 * 
 *     def __dealloc__(self):
 *         del self.oracle             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  delete __pyx_v_self->oracle;

  /* "IPO.pyx":395
 *             self.oracle = new cppIPO.ScipOracleController(name)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.oracle
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":398
 *         del self.oracle
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.name()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_5name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_5name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_13IPOScipOracle_4name(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13IPOScipOracle_4name(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("name", 0);

  /* "IPO.pyx":399
 * 
 *     def name(self):
 *         return self.oracle.name()             # <<<<<<<<<<<<<<
 * 
 *     def heuristicLevel(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->oracle->name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":398
 *         del self.oracle
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.name()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOScipOracle.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":401
 *         return self.oracle.name()
 * 
 *     def heuristicLevel(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.heuristicLevel_ScipOracle()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_7heuristicLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_7heuristicLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("heuristicLevel (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_13IPOScipOracle_6heuristicLevel(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13IPOScipOracle_6heuristicLevel(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("heuristicLevel", 0);

  /* "IPO.pyx":402
 * 
 *     def heuristicLevel(self):
 *         return self.oracle.heuristicLevel_ScipOracle()             # <<<<<<<<<<<<<<
 * 
 *     def heuristicLevel_CacheOracle(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->oracle->heuristicLevel_ScipOracle()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":401
 *         return self.oracle.name()
 * 
 *     def heuristicLevel(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.heuristicLevel_ScipOracle()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOScipOracle.heuristicLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":404
 *         return self.oracle.heuristicLevel_ScipOracle()
 * 
 *     def heuristicLevel_CacheOracle(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.heuristicLevel_CacheOracle()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_9heuristicLevel_CacheOracle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_9heuristicLevel_CacheOracle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("heuristicLevel_CacheOracle (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_13IPOScipOracle_8heuristicLevel_CacheOracle(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13IPOScipOracle_8heuristicLevel_CacheOracle(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("heuristicLevel_CacheOracle", 0);

  /* "IPO.pyx":405
 * 
 *     def heuristicLevel_CacheOracle(self):
 *         return self.oracle.heuristicLevel_CacheOracle()             # <<<<<<<<<<<<<<
 * 
 *     def affineHull(self, outputMode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->oracle->heuristicLevel_CacheOracle()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":404
 *         return self.oracle.heuristicLevel_ScipOracle()
 * 
 *     def heuristicLevel_CacheOracle(self):             # <<<<<<<<<<<<<<
 *         return self.oracle.heuristicLevel_CacheOracle()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.IPOScipOracle.heuristicLevel_CacheOracle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":407
 *         return self.oracle.heuristicLevel_CacheOracle()
 * 
 *     def affineHull(self, outputMode):             # <<<<<<<<<<<<<<
 *         #########-1-#########
 *         #convert inner description to 2-tupel IPOVector lists
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_11affineHull(PyObject *__pyx_v_self, PyObject *__pyx_v_outputMode); /*proto*/
static PyObject *__pyx_pw_3IPO_13IPOScipOracle_11affineHull(PyObject *__pyx_v_self, PyObject *__pyx_v_outputMode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affineHull (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_13IPOScipOracle_10affineHull(((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_v_self), ((PyObject *)__pyx_v_outputMode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_13IPOScipOracle_10affineHull(struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_outputMode) {
  struct ipo::InnerDescription __pyx_v_c_inner;
  std::vector<ipo::Vector>  __pyx_v_c_points;
  std::vector<ipo::Vector>  __pyx_v_c_rays;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_v_rays = NULL;
  ipo::Vector *__pyx_v_c_vector;
  size_t __pyx_v_i;
  PyObject *__pyx_v_py_vector = NULL;
  struct __pyx_obj_3IPO_IPOInnerDescription *__pyx_v_innerDescription = NULL;
  ipo::AffineOuterDescription __pyx_v_c_outer;
  struct __pyx_obj_3IPO_IPOAffineOuterDescription *__pyx_v_outerDescription = NULL;
  PyObject *__pyx_v_outer = NULL;
  ipo::LinearConstraint *__pyx_v_c_linconst;
  PyObject *__pyx_v_py_linconst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<ipo::Vector>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("affineHull", 0);

  /* "IPO.pyx":410
 *         #########-1-#########
 *         #convert inner description to 2-tupel IPOVector lists
 *         cdef cppIPO.InnerDescription c_inner = self.oracle.affineHullInner(1)             # <<<<<<<<<<<<<<
 *         print "C++ call inner\n"
 * 
 */
  __pyx_v_c_inner = __pyx_v_self->oracle->affineHullInner(1);

  /* "IPO.pyx":411
 *         #convert inner description to 2-tupel IPOVector lists
 *         cdef cppIPO.InnerDescription c_inner = self.oracle.affineHullInner(1)
 *         print "C++ call inner\n"             # <<<<<<<<<<<<<<
 * 
 *         #automagically convert to python list
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_C_call_inner) < 0) __PYX_ERR(0, 411, __pyx_L1_error)

  /* "IPO.pyx":414
 * 
 *         #automagically convert to python list
 *         c_points = c_inner.points             # <<<<<<<<<<<<<<
 *         print "A\n"
 *         c_rays = c_inner.rays
 */
  __pyx_t_1 = __pyx_v_c_inner.points;
  __pyx_v_c_points = __pyx_t_1;

  /* "IPO.pyx":415
 *         #automagically convert to python list
 *         c_points = c_inner.points
 *         print "A\n"             # <<<<<<<<<<<<<<
 *         c_rays = c_inner.rays
 *         print "B\n"
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_A) < 0) __PYX_ERR(0, 415, __pyx_L1_error)

  /* "IPO.pyx":416
 *         c_points = c_inner.points
 *         print "A\n"
 *         c_rays = c_inner.rays             # <<<<<<<<<<<<<<
 *         print "B\n"
 *         points = []
 */
  __pyx_t_1 = __pyx_v_c_inner.rays;
  __pyx_v_c_rays = __pyx_t_1;

  /* "IPO.pyx":417
 *         print "A\n"
 *         c_rays = c_inner.rays
 *         print "B\n"             # <<<<<<<<<<<<<<
 *         points = []
 *         rays = []
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_B) < 0) __PYX_ERR(0, 417, __pyx_L1_error)

  /* "IPO.pyx":418
 *         c_rays = c_inner.rays
 *         print "B\n"
 *         points = []             # <<<<<<<<<<<<<<
 *         rays = []
 *         cdef cppIPO.Vector *c_vector
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_points = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":419
 *         print "B\n"
 *         points = []
 *         rays = []             # <<<<<<<<<<<<<<
 *         cdef cppIPO.Vector *c_vector
 *         print "C\n"
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rays = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":421
 *         rays = []
 *         cdef cppIPO.Vector *c_vector
 *         print "C\n"             # <<<<<<<<<<<<<<
 *         #convert points to python wrapperclass IPOVector
 *         for i in range(0,c_points.size()):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_C) < 0) __PYX_ERR(0, 421, __pyx_L1_error)

  /* "IPO.pyx":423
 *         print "C\n"
 *         #convert points to python wrapperclass IPOVector
 *         for i in range(0,c_points.size()):             # <<<<<<<<<<<<<<
 *             print "D"+str(i)+"\n"
 *             c_vector = ref(c_points[i])
 */
  __pyx_t_3 = __pyx_v_c_points.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "IPO.pyx":424
 *         #convert points to python wrapperclass IPOVector
 *         for i in range(0,c_points.size()):
 *             print "D"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             c_vector = ref(c_points[i])
 *             print "E"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_D, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":425
 *         for i in range(0,c_points.size()):
 *             print "D"+str(i)+"\n"
 *             c_vector = ref(c_points[i])             # <<<<<<<<<<<<<<
 *             print "E"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)
 */
    __pyx_v_c_vector = (&(__pyx_v_c_points[__pyx_v_i]));

    /* "IPO.pyx":426
 *             print "D"+str(i)+"\n"
 *             c_vector = ref(c_points[i])
 *             print "E"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             py_vector = CreateIPOVector(c_vector)
 *             print "F"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_E, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":427
 *             c_vector = ref(c_points[i])
 *             print "E"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)             # <<<<<<<<<<<<<<
 *             print "F"+str(i)+"\n"
 *             points.append(py_vector)
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateIPOVector(__pyx_v_c_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_py_vector, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "IPO.pyx":428
 *             print "E"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)
 *             print "F"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             points.append(py_vector)
 *             print "G"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_F, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":429
 *             py_vector = CreateIPOVector(c_vector)
 *             print "F"+str(i)+"\n"
 *             points.append(py_vector)             # <<<<<<<<<<<<<<
 *             print "G"+str(i)+"\n"
 * 
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_points, __pyx_v_py_vector); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 429, __pyx_L1_error)

    /* "IPO.pyx":430
 *             print "F"+str(i)+"\n"
 *             points.append(py_vector)
 *             print "G"+str(i)+"\n"             # <<<<<<<<<<<<<<
 * 
 *         #convert rays to python wrapperclass IPOVector
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_G, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "IPO.pyx":433
 * 
 *         #convert rays to python wrapperclass IPOVector
 *         for i in range(0,c_rays.size()):             # <<<<<<<<<<<<<<
 *             print "H"+str(i)+"\n"
 *             c_vector = ref(c_rays[i])
 */
  __pyx_t_3 = __pyx_v_c_rays.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "IPO.pyx":434
 *         #convert rays to python wrapperclass IPOVector
 *         for i in range(0,c_rays.size()):
 *             print "H"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             c_vector = ref(c_rays[i])
 *             print "I"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_H, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":435
 *         for i in range(0,c_rays.size()):
 *             print "H"+str(i)+"\n"
 *             c_vector = ref(c_rays[i])             # <<<<<<<<<<<<<<
 *             print "I"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)
 */
    __pyx_v_c_vector = (&(__pyx_v_c_rays[__pyx_v_i]));

    /* "IPO.pyx":436
 *             print "H"+str(i)+"\n"
 *             c_vector = ref(c_rays[i])
 *             print "I"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             py_vector = CreateIPOVector(c_vector)
 *             print "J"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_I, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":437
 *             c_vector = ref(c_rays[i])
 *             print "I"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)             # <<<<<<<<<<<<<<
 *             print "J"+str(i)+"\n"
 *             rays.append(py_vector)
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateIPOVector(__pyx_v_c_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_py_vector, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "IPO.pyx":438
 *             print "I"+str(i)+"\n"
 *             py_vector = CreateIPOVector(c_vector)
 *             print "J"+str(i)+"\n"             # <<<<<<<<<<<<<<
 *             rays.append(py_vector)
 *             print "K"+str(i)+"\n"
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_J, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IPO.pyx":439
 *             py_vector = CreateIPOVector(c_vector)
 *             print "J"+str(i)+"\n"
 *             rays.append(py_vector)             # <<<<<<<<<<<<<<
 *             print "K"+str(i)+"\n"
 * 
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_rays, __pyx_v_py_vector); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 439, __pyx_L1_error)

    /* "IPO.pyx":440
 *             print "J"+str(i)+"\n"
 *             rays.append(py_vector)
 *             print "K"+str(i)+"\n"             # <<<<<<<<<<<<<<
 * 
 *         innerDescription = IPOInnerDescription()
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_n_s_K, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "IPO.pyx":442
 *             print "K"+str(i)+"\n"
 * 
 *         innerDescription = IPOInnerDescription()             # <<<<<<<<<<<<<<
 *         print "L\n"
 *         innerDescription.points = points
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOInnerDescription), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_innerDescription = ((struct __pyx_obj_3IPO_IPOInnerDescription *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":443
 * 
 *         innerDescription = IPOInnerDescription()
 *         print "L\n"             # <<<<<<<<<<<<<<
 *         innerDescription.points = points
 *         print "M\n"
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_L) < 0) __PYX_ERR(0, 443, __pyx_L1_error)

  /* "IPO.pyx":444
 *         innerDescription = IPOInnerDescription()
 *         print "L\n"
 *         innerDescription.points = points             # <<<<<<<<<<<<<<
 *         print "M\n"
 *         innerDescription.rays = rays
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_innerDescription), __pyx_n_s_points, __pyx_v_points) < 0) __PYX_ERR(0, 444, __pyx_L1_error)

  /* "IPO.pyx":445
 *         print "L\n"
 *         innerDescription.points = points
 *         print "M\n"             # <<<<<<<<<<<<<<
 *         innerDescription.rays = rays
 *         print "inner verarbeitung\n"
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_M) < 0) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "IPO.pyx":446
 *         innerDescription.points = points
 *         print "M\n"
 *         innerDescription.rays = rays             # <<<<<<<<<<<<<<
 *         print "inner verarbeitung\n"
 *         #########-2-#########
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_innerDescription), __pyx_n_s_rays, __pyx_v_rays) < 0) __PYX_ERR(0, 446, __pyx_L1_error)

  /* "IPO.pyx":447
 *         print "M\n"
 *         innerDescription.rays = rays
 *         print "inner verarbeitung\n"             # <<<<<<<<<<<<<<
 *         #########-2-#########
 *         #convert outer description to IPOLinearConstraint list
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_inner_verarbeitung) < 0) __PYX_ERR(0, 447, __pyx_L1_error)

  /* "IPO.pyx":450
 *         #########-2-#########
 *         #convert outer description to IPOLinearConstraint list
 *         cdef cppIPO.AffineOuterDescription c_outer = self.oracle.affineHullOuter(1)             # <<<<<<<<<<<<<<
 *         print "C++ call outer\n"
 *         outerDescription = IPOAffineOuterDescription()
 */
  __pyx_v_c_outer = __pyx_v_self->oracle->affineHullOuter(1);

  /* "IPO.pyx":451
 *         #convert outer description to IPOLinearConstraint list
 *         cdef cppIPO.AffineOuterDescription c_outer = self.oracle.affineHullOuter(1)
 *         print "C++ call outer\n"             # <<<<<<<<<<<<<<
 *         outerDescription = IPOAffineOuterDescription()
 *         outer = []
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_C_call_outer) < 0) __PYX_ERR(0, 451, __pyx_L1_error)

  /* "IPO.pyx":452
 *         cdef cppIPO.AffineOuterDescription c_outer = self.oracle.affineHullOuter(1)
 *         print "C++ call outer\n"
 *         outerDescription = IPOAffineOuterDescription()             # <<<<<<<<<<<<<<
 *         outer = []
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOAffineOuterDescription), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_outerDescription = ((struct __pyx_obj_3IPO_IPOAffineOuterDescription *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":453
 *         print "C++ call outer\n"
 *         outerDescription = IPOAffineOuterDescription()
 *         outer = []             # <<<<<<<<<<<<<<
 * 
 *         for i in range(0, c_outer.size()):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_outer = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":455
 *         outer = []
 * 
 *         for i in range(0, c_outer.size()):             # <<<<<<<<<<<<<<
 *             c_linconst = ref(c_outer[i])
 *             py_linconst = CreateLinearConstraint(c_linconst)
 */
  __pyx_t_3 = __pyx_v_c_outer.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "IPO.pyx":456
 * 
 *         for i in range(0, c_outer.size()):
 *             c_linconst = ref(c_outer[i])             # <<<<<<<<<<<<<<
 *             py_linconst = CreateLinearConstraint(c_linconst)
 *             outer.append(py_linconst)
 */
    __pyx_v_c_linconst = (&(__pyx_v_c_outer[__pyx_v_i]));

    /* "IPO.pyx":457
 *         for i in range(0, c_outer.size()):
 *             c_linconst = ref(c_outer[i])
 *             py_linconst = CreateLinearConstraint(c_linconst)             # <<<<<<<<<<<<<<
 *             outer.append(py_linconst)
 * 
 */
    __pyx_t_2 = __pyx_f_3IPO_CreateLinearConstraint(__pyx_v_c_linconst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_py_linconst, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "IPO.pyx":458
 *             c_linconst = ref(c_outer[i])
 *             py_linconst = CreateLinearConstraint(c_linconst)
 *             outer.append(py_linconst)             # <<<<<<<<<<<<<<
 * 
 *         outerDescription.constraints = outer
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_outer, __pyx_v_py_linconst); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 458, __pyx_L1_error)
  }

  /* "IPO.pyx":460
 *             outer.append(py_linconst)
 * 
 *         outerDescription.constraints = outer             # <<<<<<<<<<<<<<
 *         print "FERTIG\n"
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_outerDescription), __pyx_n_s_constraints, __pyx_v_outer) < 0) __PYX_ERR(0, 460, __pyx_L1_error)

  /* "IPO.pyx":461
 * 
 *         outerDescription.constraints = outer
 *         print "FERTIG\n"             # <<<<<<<<<<<<<<
 * 
 *         return (innerDescription, outerDescription)
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_FERTIG) < 0) __PYX_ERR(0, 461, __pyx_L1_error)

  /* "IPO.pyx":463
 *         print "FERTIG\n"
 * 
 *         return (innerDescription, outerDescription)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_innerDescription));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_innerDescription));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_innerDescription));
  __Pyx_INCREF(((PyObject *)__pyx_v_outerDescription));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outerDescription));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_outerDescription));
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":407
 *         return self.oracle.heuristicLevel_CacheOracle()
 * 
 *     def affineHull(self, outputMode):             # <<<<<<<<<<<<<<
 *         #########-1-#########
 *         #convert inner description to 2-tupel IPOVector lists
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("IPO.IPOScipOracle.affineHull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_rays);
  __Pyx_XDECREF(__pyx_v_py_vector);
  __Pyx_XDECREF((PyObject *)__pyx_v_innerDescription);
  __Pyx_XDECREF((PyObject *)__pyx_v_outerDescription);
  __Pyx_XDECREF(__pyx_v_outer);
  __Pyx_XDECREF(__pyx_v_py_linconst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":466
 * 
 * 
 * cdef object CreateScipOracle(str name, cppIPO.ScipOracleController oracle):             # <<<<<<<<<<<<<<
 *     py_oracle = IPOScipOracle(name, 0)
 *     py_oracle.oracle = new cppIPO.ScipOracleController(name, oracle)
 */

static PyObject *__pyx_f_3IPO_CreateScipOracle(PyObject *__pyx_v_name, ipo::ScipOracleController __pyx_v_oracle) {
  struct __pyx_obj_3IPO_IPOScipOracle *__pyx_v_py_oracle = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  ipo::ScipOracleController *__pyx_t_4;
  __Pyx_RefNannySetupContext("CreateScipOracle", 0);

  /* "IPO.pyx":467
 * 
 * cdef object CreateScipOracle(str name, cppIPO.ScipOracleController oracle):
 *     py_oracle = IPOScipOracle(name, 0)             # <<<<<<<<<<<<<<
 *     py_oracle.oracle = new cppIPO.ScipOracleController(name, oracle)
 *     return py_oracle
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_name);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3IPO_IPOScipOracle), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_py_oracle = ((struct __pyx_obj_3IPO_IPOScipOracle *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "IPO.pyx":468
 * cdef object CreateScipOracle(str name, cppIPO.ScipOracleController oracle):
 *     py_oracle = IPOScipOracle(name, 0)
 *     py_oracle.oracle = new cppIPO.ScipOracleController(name, oracle)             # <<<<<<<<<<<<<<
 *     return py_oracle
 * 
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
  try {
    __pyx_t_4 = new ipo::ScipOracleController(__pyx_t_3, __pyx_v_oracle);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 468, __pyx_L1_error)
  }
  __pyx_v_py_oracle->oracle = __pyx_t_4;

  /* "IPO.pyx":469
 *     py_oracle = IPOScipOracle(name, 0)
 *     py_oracle.oracle = new cppIPO.ScipOracleController(name, oracle)
 *     return py_oracle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_oracle));
  __pyx_r = ((PyObject *)__pyx_v_py_oracle);
  goto __pyx_L0;

  /* "IPO.pyx":466
 * 
 * 
 * cdef object CreateScipOracle(str name, cppIPO.ScipOracleController oracle):             # <<<<<<<<<<<<<<
 *     py_oracle = IPOScipOracle(name, 0)
 *     py_oracle.oracle = new cppIPO.ScipOracleController(name, oracle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IPO.CreateScipOracle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_oracle);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":488
 * #Affine Hull
 * 
 * def affineHull():             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_1affineHull(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_3IPO_1affineHull = {"affineHull", (PyCFunction)__pyx_pw_3IPO_1affineHull, METH_NOARGS, 0};
static PyObject *__pyx_pw_3IPO_1affineHull(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affineHull (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_affineHull(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_affineHull(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affineHull", 0);

  /* "IPO.pyx":489
 * 
 * def affineHull():
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * ####################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "IPO.pyx":488
 * #Affine Hull
 * 
 * def affineHull():             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":497
 *     cdef cppIPO.Foo* foo
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.foo = new cppIPO.Foo()
 *         if self.foo is NULL:
 */

/* Python wrapper */
static int __pyx_pw_3IPO_4Test_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IPO_4Test_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3IPO_4Test___cinit__(((struct __pyx_obj_3IPO_Test *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IPO_4Test___cinit__(struct __pyx_obj_3IPO_Test *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ipo::Foo *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IPO.pyx":498
 * 
 *     def __cinit__(self):
 *         self.foo = new cppIPO.Foo()             # <<<<<<<<<<<<<<
 *         if self.foo is NULL:
 *             raise MemoryError()
 */
  try {
    __pyx_t_1 = new ipo::Foo();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 498, __pyx_L1_error)
  }
  __pyx_v_self->foo = __pyx_t_1;

  /* "IPO.pyx":499
 *     def __cinit__(self):
 *         self.foo = new cppIPO.Foo()
 *         if self.foo is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->foo == NULL) != 0);
  if (__pyx_t_2) {

    /* "IPO.pyx":500
 *         self.foo = new cppIPO.Foo()
 *         if self.foo is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 500, __pyx_L1_error)

    /* "IPO.pyx":499
 *     def __cinit__(self):
 *         self.foo = new cppIPO.Foo()
 *         if self.foo is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 * 
 */
  }

  /* "IPO.pyx":497
 *     cdef cppIPO.Foo* foo
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.foo = new cppIPO.Foo()
 *         if self.foo is NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IPO.Test.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IPO.pyx":502
 *             raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.foo
 * 
 */

/* Python wrapper */
static void __pyx_pw_3IPO_4Test_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IPO_4Test_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IPO_4Test_2__dealloc__(((struct __pyx_obj_3IPO_Test *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IPO_4Test_2__dealloc__(struct __pyx_obj_3IPO_Test *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IPO.pyx":503
 * 
 *     def __dealloc__(self):
 *         del self.foo             # <<<<<<<<<<<<<<
 * 
 *     def print_Example(self):
 */
  delete __pyx_v_self->foo;

  /* "IPO.pyx":502
 *             raise MemoryError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.foo
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IPO.pyx":505
 *         del self.foo
 * 
 *     def print_Example(self):             # <<<<<<<<<<<<<<
 *         return self.foo.printFoo()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IPO_4Test_5print_Example(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IPO_4Test_5print_Example(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_Example (wrapper)", 0);
  __pyx_r = __pyx_pf_3IPO_4Test_4print_Example(((struct __pyx_obj_3IPO_Test *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IPO_4Test_4print_Example(struct __pyx_obj_3IPO_Test *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("print_Example", 0);

  /* "IPO.pyx":506
 * 
 *     def print_Example(self):
 *         return self.foo.printFoo()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->foo->printFoo()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "IPO.pyx":505
 *         del self.foo
 * 
 *     def print_Example(self):             # <<<<<<<<<<<<<<
 *         return self.foo.printFoo()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IPO.Test.print_Example", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_3IPO_SoplexRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_14SoplexRational_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_SoplexRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_14SoplexRational_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_SoplexRational[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_SoplexRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.SoplexRational", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_SoplexRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_SoplexRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_SoplexRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_SoplexRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOReferenceCountedVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_3IPO_IPOReferenceCountedVector(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_3IPO_IPOReferenceCountedVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOReferenceCountedVector", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOReferenceCountedVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOReferenceCountedVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOReferenceCountedVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOVector(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_9IPOVector_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_IPOVector(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_9IPOVector_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_IPOVector[] = {
  {"swap", (PyCFunction)__pyx_pw_3IPO_9IPOVector_5swap, METH_O, 0},
  {"isConstant", (PyCFunction)__pyx_pw_3IPO_9IPOVector_7isConstant, METH_NOARGS, 0},
  {"size", (PyCFunction)__pyx_pw_3IPO_9IPOVector_9size, METH_NOARGS, 0},
  {"isSorted", (PyCFunction)__pyx_pw_3IPO_9IPOVector_11isSorted, METH_NOARGS, 0},
  {"index", (PyCFunction)__pyx_pw_3IPO_9IPOVector_13index, METH_O, 0},
  {"approximation", (PyCFunction)__pyx_pw_3IPO_9IPOVector_15approximation, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_IPOVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOVector", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_3IPO_9IPOVector_17__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOLinearConstraint(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_19IPOLinearConstraint_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_IPOLinearConstraint(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_19IPOLinearConstraint_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_IPOLinearConstraint[] = {
  {"isConstant", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_5isConstant, METH_NOARGS, 0},
  {"isEquation", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_9isEquation, METH_NOARGS, 0},
  {"type", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_11type, METH_NOARGS, 0},
  {"normal", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_13normal, METH_NOARGS, 0},
  {"rhs", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_15rhs, METH_NOARGS, 0},
  {"getMaximumNorm", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_17getMaximumNorm, METH_NOARGS, 0},
  {"definesCompleteFace", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_19definesCompleteFace, METH_NOARGS, 0},
  {"definesEmptyFace", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_21definesEmptyFace, METH_NOARGS, 0},
  {"definesTrivialFace", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_23definesTrivialFace, METH_NOARGS, 0},
  {"evaluatePoint", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_25evaluatePoint, METH_O, 0},
  {"evaluateRay", (PyCFunction)__pyx_pw_3IPO_19IPOLinearConstraint_27evaluateRay, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_IPOLinearConstraint = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOLinearConstraint", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOLinearConstraint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOLinearConstraint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_3IPO_19IPOLinearConstraint_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOLinearConstraint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOLinearConstraint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOInnerDescription(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_3IPO_IPOInnerDescription(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_IPOInnerDescription[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_IPOInnerDescription = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOInnerDescription", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOInnerDescription), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOInnerDescription, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOInnerDescription, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3IPO_19IPOInnerDescription_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOInnerDescription, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOAffineOuterDescription(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_3IPO_IPOAffineOuterDescription(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_IPOAffineOuterDescription[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_IPOAffineOuterDescription = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOAffineOuterDescription", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOAffineOuterDescription), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOAffineOuterDescription, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOAffineOuterDescription, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3IPO_25IPOAffineOuterDescription_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOAffineOuterDescription, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOSpace(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_8IPOSpace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_IPOSpace(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_8IPOSpace_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_3IPO_IPOSpace(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_3IPO_IPOSpace[] = {
  {"isConstant", (PyCFunction)__pyx_pw_3IPO_8IPOSpace_5isConstant, METH_NOARGS, 0},
  {"dimension", (PyCFunction)__pyx_pw_3IPO_8IPOSpace_7dimension, METH_NOARGS, 0},
  {"printVector", (PyCFunction)__pyx_pw_3IPO_8IPOSpace_9printVector, METH_VARARGS|METH_KEYWORDS, 0},
  {"printLinearForm", (PyCFunction)__pyx_pw_3IPO_8IPOSpace_11printLinearForm, METH_O, 0},
  {"printLinearConstraint", (PyCFunction)__pyx_pw_3IPO_8IPOSpace_13printLinearConstraint, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_IPOSpace = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3IPO_IPOSpace, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_IPOSpace = {
  0, /*mp_length*/
  __pyx_pw_3IPO_8IPOSpace_15__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_3IPO_IPOSpace = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOSpace", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOSpace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOSpace, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_IPOSpace, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_IPOSpace, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_3IPO_8IPOSpace_17__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOSpace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOSpace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOScipOracle(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_13IPOScipOracle_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_IPOScipOracle(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_13IPOScipOracle_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_IPOScipOracle[] = {
  {"name", (PyCFunction)__pyx_pw_3IPO_13IPOScipOracle_5name, METH_NOARGS, 0},
  {"heuristicLevel", (PyCFunction)__pyx_pw_3IPO_13IPOScipOracle_7heuristicLevel, METH_NOARGS, 0},
  {"heuristicLevel_CacheOracle", (PyCFunction)__pyx_pw_3IPO_13IPOScipOracle_9heuristicLevel_CacheOracle, METH_NOARGS, 0},
  {"affineHull", (PyCFunction)__pyx_pw_3IPO_13IPOScipOracle_11affineHull, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_IPOScipOracle = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOScipOracle", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOScipOracle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOScipOracle, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_IPOScipOracle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOScipOracle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOPolyhedron(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_3IPO_IPOPolyhedron(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_3IPO_IPOPolyhedron = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOPolyhedron", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOPolyhedron), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOPolyhedron, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOPolyhedron, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_IPOFace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_3IPO_IPOFace(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_3IPO_IPOFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.IPOFace", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_IPOFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_IPOFace, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_IPOFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3IPO_Test(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3IPO_4Test_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3IPO_Test(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IPO_4Test_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3IPO_Test[] = {
  {"print_Example", (PyCFunction)__pyx_pw_3IPO_4Test_5print_Example, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IPO_Test = {
  PyVarObject_HEAD_INIT(0, 0)
  "IPO.Test", /*tp_name*/
  sizeof(struct __pyx_obj_3IPO_Test), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IPO_Test, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IPO_Test, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IPO_Test, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "IPO",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_s_C_call_inner, __pyx_k_C_call_inner, sizeof(__pyx_k_C_call_inner), 0, 0, 1, 0},
  {&__pyx_kp_s_C_call_outer, __pyx_k_C_call_outer, sizeof(__pyx_k_C_call_outer), 0, 0, 1, 0},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_FERTIG, __pyx_k_FERTIG, sizeof(__pyx_k_FERTIG), 0, 0, 1, 1},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_IPO, __pyx_k_IPO, sizeof(__pyx_k_IPO), 0, 0, 1, 1},
  {&__pyx_n_s_IPOLinearConstraint, __pyx_k_IPOLinearConstraint, sizeof(__pyx_k_IPOLinearConstraint), 0, 0, 1, 1},
  {&__pyx_n_s_IPOVector, __pyx_k_IPOVector, sizeof(__pyx_k_IPOVector), 0, 0, 1, 1},
  {&__pyx_n_s_J, __pyx_k_J, sizeof(__pyx_k_J), 0, 0, 1, 1},
  {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_NonConstError, __pyx_k_NonConstError, sizeof(__pyx_k_NonConstError), 0, 0, 1, 1},
  {&__pyx_n_s_NonConstError___str, __pyx_k_NonConstError___str, sizeof(__pyx_k_NonConstError___str), 0, 0, 1, 1},
  {&__pyx_n_s_NonConstError_init, __pyx_k_NonConstError_init, sizeof(__pyx_k_NonConstError_init), 0, 0, 1, 1},
  {&__pyx_kp_s_This_is_no_const_value, __pyx_k_This_is_no_const_value, sizeof(__pyx_k_This_is_no_const_value), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 0, 1, 0},
  {&__pyx_n_s_affineHull, __pyx_k_affineHull, sizeof(__pyx_k_affineHull), 0, 0, 1, 1},
  {&__pyx_n_s_cerr, __pyx_k_cerr, sizeof(__pyx_k_cerr), 0, 0, 1, 1},
  {&__pyx_n_s_clog, __pyx_k_clog, sizeof(__pyx_k_clog), 0, 0, 1, 1},
  {&__pyx_n_s_cons, __pyx_k_cons, sizeof(__pyx_k_cons), 0, 0, 1, 1},
  {&__pyx_n_s_constraints, __pyx_k_constraints, sizeof(__pyx_k_constraints), 0, 0, 1, 1},
  {&__pyx_n_s_cout, __pyx_k_cout, sizeof(__pyx_k_cout), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_home_sandra_Documents_HiWi_IPO, __pyx_k_home_sandra_Documents_HiWi_IPO, sizeof(__pyx_k_home_sandra_Documents_HiWi_IPO), 0, 0, 1, 0},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_s_inner_verarbeitung, __pyx_k_inner_verarbeitung, sizeof(__pyx_k_inner_verarbeitung), 0, 0, 1, 0},
  {&__pyx_n_s_isConst, __pyx_k_isConst, sizeof(__pyx_k_isConst), 0, 0, 1, 1},
  {&__pyx_n_s_isConstant, __pyx_k_isConstant, sizeof(__pyx_k_isConstant), 0, 0, 1, 1},
  {&__pyx_n_s_isNew, __pyx_k_isNew, sizeof(__pyx_k_isNew), 0, 0, 1, 1},
  {&__pyx_n_s_lin, __pyx_k_lin, sizeof(__pyx_k_lin), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rays, __pyx_k_rays, sizeof(__pyx_k_rays), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 423, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "IPO.pyx":35
 * 
 * cdef object CreateSoplexRational(cppIPO.Rational *rational):
 *     py_rational = SoplexRational(False)             # <<<<<<<<<<<<<<
 *     py_rational.cpp_rational = rational
 *     return py_rational
 */
  __pyx_tuple_ = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "IPO.pyx":40
 * 
 * cdef object CreateConstSoplexRational(const cppIPO.Rational *rational):
 *     py_rational = SoplexRational(True)             # <<<<<<<<<<<<<<
 *     py_rational.const_rational = rational
 *     return py_rational
 */
  __pyx_tuple__2 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "IPO.pyx":142
 * 
 * cdef object CreateIPOVector(cppIPO.Vector *vector):
 *     py_vector = IPOVector(False)             # <<<<<<<<<<<<<<
 *     py_vector.vec = vector
 *     return py_vector
 */
  __pyx_tuple__3 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "IPO.pyx":147
 * 
 * cdef object CreateConstIPOVector(const cppIPO.Vector *vector):
 *     py_vector = IPOVector(True)             # <<<<<<<<<<<<<<
 *     py_vector.const_vec = vector
 *     return py_vector
 */
  __pyx_tuple__4 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "IPO.pyx":246
 *                 return self.const_lin.evaluatePoint(deref(point.const_vec))
 *         else:
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 * 
 *     def evaluateRay(self, IPOVector ray):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_IPOVector); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "IPO.pyx":256
 *                 return self.const_lin.evaluateRay(deref(ray.const_vec))
 *         else:
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_IPOVector); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "IPO.pyx":259
 * 
 * cdef object CreateLinearConstraint(cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(False)             # <<<<<<<<<<<<<<
 *     py_linconst.lin = linconst
 *     return py_linconst
 */
  __pyx_tuple__7 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "IPO.pyx":264
 * 
 * cdef object CreateConstLinearConstraint(const cppIPO.LinearConstraint *linconst):
 *     py_linconst = IPOLinearConstraint(True)             # <<<<<<<<<<<<<<
 *     py_linconst.const_lin = linconst
 *     return py_linconst
 */
  __pyx_tuple__8 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "IPO.pyx":311
 *     def printVector(self, stream, IPOVector vector):
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 *     #cout, cerr, clog are ostreams
 *         if stream == "cout":
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_IPOVector); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "IPO.pyx":325
 *     def printLinearForm(self, IPOVector vector):
 *         if (not vector.isConstant()):
 *             raise NonConstError('IPOVector')             # <<<<<<<<<<<<<<
 *         print("lin")
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_IPOVector); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "IPO.pyx":330
 *     def printLinearConstraint(self, IPOLinearConstraint lincons):
 *         if (not lincons.isConstant()):
 *             raise NonConstError('IPOLinearConstraint')             # <<<<<<<<<<<<<<
 *         print("cons")
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_IPOLinearConstraint); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "IPO.pyx":376
 * 
 * cdef object CreateIPOSpace(cppIPO.Space *space):
 *     py_space = IPOSpace(False)             # <<<<<<<<<<<<<<
 *     py_space.cpp_space = space
 *     return py_space
 */
  __pyx_tuple__12 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "IPO.pyx":381
 * 
 * cdef object CreateConstIPOSpace(const cppIPO.Space *space):
 *     py_space = IPOSpace(True)             # <<<<<<<<<<<<<<
 *     py_space.const_space = space
 *     return py_space
 */
  __pyx_tuple__13 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "IPO.pyx":12
 * #Errors
 * class NonConstError:
 *     def init(self, value):             # <<<<<<<<<<<<<<
 *         self.value = 'This is no const value: '+value
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sandra_Documents_HiWi_IPO, __pyx_n_s_init, 12, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 12, __pyx_L1_error)

  /* "IPO.pyx":15
 *         self.value = 'This is no const value: '+value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sandra_Documents_HiWi_IPO, __pyx_n_s_str, 15, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 15, __pyx_L1_error)

  /* "IPO.pyx":488
 * #Affine Hull
 * 
 * def affineHull():             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sandra_Documents_HiWi_IPO, __pyx_n_s_affineHull, 488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initIPO(void); /*proto*/
PyMODINIT_FUNC initIPO(void)
#else
PyMODINIT_FUNC PyInit_IPO(void); /*proto*/
PyMODINIT_FUNC PyInit_IPO(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_IPO(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("IPO", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_IPO) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "IPO")) {
      if (unlikely(PyDict_SetItemString(modules, "IPO", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3IPO_SoplexRational) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_type_3IPO_SoplexRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SoplexRational", (PyObject *)&__pyx_type_3IPO_SoplexRational) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_ptype_3IPO_SoplexRational = &__pyx_type_3IPO_SoplexRational;
  if (PyType_Ready(&__pyx_type_3IPO_IPOReferenceCountedVector) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_type_3IPO_IPOReferenceCountedVector.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOReferenceCountedVector", (PyObject *)&__pyx_type_3IPO_IPOReferenceCountedVector) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOReferenceCountedVector = &__pyx_type_3IPO_IPOReferenceCountedVector;
  if (PyType_Ready(&__pyx_type_3IPO_IPOVector) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_type_3IPO_IPOVector.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOVector", (PyObject *)&__pyx_type_3IPO_IPOVector) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOVector = &__pyx_type_3IPO_IPOVector;
  if (PyType_Ready(&__pyx_type_3IPO_IPOLinearConstraint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_type_3IPO_IPOLinearConstraint.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOLinearConstraint", (PyObject *)&__pyx_type_3IPO_IPOLinearConstraint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOLinearConstraint = &__pyx_type_3IPO_IPOLinearConstraint;
  if (PyType_Ready(&__pyx_type_3IPO_IPOInnerDescription) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_type_3IPO_IPOInnerDescription.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOInnerDescription", (PyObject *)&__pyx_type_3IPO_IPOInnerDescription) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOInnerDescription = &__pyx_type_3IPO_IPOInnerDescription;
  if (PyType_Ready(&__pyx_type_3IPO_IPOAffineOuterDescription) < 0) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_type_3IPO_IPOAffineOuterDescription.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOAffineOuterDescription", (PyObject *)&__pyx_type_3IPO_IPOAffineOuterDescription) < 0) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOAffineOuterDescription = &__pyx_type_3IPO_IPOAffineOuterDescription;
  if (PyType_Ready(&__pyx_type_3IPO_IPOSpace) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __pyx_type_3IPO_IPOSpace.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOSpace", (PyObject *)&__pyx_type_3IPO_IPOSpace) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOSpace = &__pyx_type_3IPO_IPOSpace;
  if (PyType_Ready(&__pyx_type_3IPO_IPOScipOracle) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_type_3IPO_IPOScipOracle.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOScipOracle", (PyObject *)&__pyx_type_3IPO_IPOScipOracle) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOScipOracle = &__pyx_type_3IPO_IPOScipOracle;
  if (PyType_Ready(&__pyx_type_3IPO_IPOPolyhedron) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_type_3IPO_IPOPolyhedron.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOPolyhedron", (PyObject *)&__pyx_type_3IPO_IPOPolyhedron) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOPolyhedron = &__pyx_type_3IPO_IPOPolyhedron;
  if (PyType_Ready(&__pyx_type_3IPO_IPOFace) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_type_3IPO_IPOFace.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IPOFace", (PyObject *)&__pyx_type_3IPO_IPOFace) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_ptype_3IPO_IPOFace = &__pyx_type_3IPO_IPOFace;
  if (PyType_Ready(&__pyx_type_3IPO_Test) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_type_3IPO_Test.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Test", (PyObject *)&__pyx_type_3IPO_Test) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_ptype_3IPO_Test = &__pyx_type_3IPO_Test;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "IPO.pyx":11
 * ####################################
 * #Errors
 * class NonConstError:             # <<<<<<<<<<<<<<
 *     def init(self, value):
 *         self.value = 'This is no const value: '+value
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_NonConstError, __pyx_n_s_NonConstError, (PyObject *) NULL, __pyx_n_s_IPO, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "IPO.pyx":12
 * #Errors
 * class NonConstError:
 *     def init(self, value):             # <<<<<<<<<<<<<<
 *         self.value = 'This is no const value: '+value
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3IPO_13NonConstError_1init, 0, __pyx_n_s_NonConstError_init, NULL, __pyx_n_s_IPO, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IPO.pyx":15
 *         self.value = 'This is no const value: '+value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3IPO_13NonConstError_3__str__, 0, __pyx_n_s_NonConstError___str, NULL, __pyx_n_s_IPO, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_str, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IPO.pyx":11
 * ####################################
 * #Errors
 * class NonConstError:             # <<<<<<<<<<<<<<
 *     def init(self, value):
 *         self.value = 'This is no const value: '+value
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_NonConstError, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NonConstError, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":488
 * #Affine Hull
 * 
 * def affineHull():             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3IPO_1affineHull, NULL, __pyx_n_s_IPO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_affineHull, __pyx_t_1) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IPO.pyx":1
 * ####################################             # <<<<<<<<<<<<<<
 * #Imports
 * cimport cppIPO
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init IPO", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init IPO");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetModuleGlobalName */
    static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
        static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* BytesEquals */
        static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
        static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
            static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
            static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
