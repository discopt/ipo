#!/usr/bin/python

import sys
import IPO
import random

def readMat(fileName):
  data = open(fileName, 'r').read().split()
  m = int(data[0])
  n = int(data[1])
  A = [ [ [0] for c in xrange(n) ] for r in xrange(m) ]
  i = 2
  for r in xrange(m):
    for c in xrange(n):
      A[r][c] = int(data[i])
      i += 1
  return A

# K_{4,4} plus 2x2 hyperedge.
A =      [[ 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ], # a1
          [ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ], # a2
          [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 ], # a3
          [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 ], # a4
          [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 ], # b1
          [ 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 ], # b2
          [ 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 ], # b3
          [ 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0 ]] # b4

weights = [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1 ]

# K_{4,4} plus 2x3 hyperedge.
A =      [[ 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ], # a1
          [ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ], # a2
          [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 ], # a3
          [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 ], # a4
          [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 ], # b1
          [ 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 ], # b2
          [ 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1 ], # b3
          [ 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0 ]] # b4

weights = [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1 ]

# Interval matrices.
A =      [[ 1, 0, 0, 0, 0, 0, 0, 0, 1 ], # v1
          [ 1, 1, 0, 0, 0, 0, 0, 1, 1 ], # v2
          [ 0, 1, 1, 0, 0, 0, 0, 1, 0 ], # v3
          [ 0, 0, 1, 1, 0, 0, 0, 0, 0 ], # v4
          [ 0, 0, 0, 1, 1, 0, 0, 0, 0 ], # v5
          [ 0, 0, 0, 0, 1, 1, 0, 0, 0 ], # v6
          [ 0, 0, 0, 0, 0, 1, 1, 0, 1 ], # v7
          [ 0, 0, 0, 0, 0, 0, 1, 0, 1 ]] # v8

weights = [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]

A = readMat(sys.argv[1])
weights = [1] * len(A[0])


#objectiveType = 'weights'
#objectiveType = 'random'
#objectiveType = '0/1-random'
objectiveType = '0/1-random'
objectiveZeroProbability = 0.5

N = 3000

m = len(A)
n = len(A[0])

# Print LP.

print('max  %s\n' % (weights))
print('vars  %s' % (' '.join([ ('x%02d' % (c+1)) for c in xrange(n) ])))
for r in xrange(m):
  if r == 0:
    st = 's.t.'
  else:
    st = '    '
  row = ' '.join([('%3d' % (x)) for x in A[r]])
  print('%s %s   <= 1' % (st, row))

# Write LP.

fileName = '/tmp/hypergraph.lp'
lpData = '''
minimize cost: 0 x01
s.t.
'''
for r in xrange(m):
  lpData += ' + '.join([ ('%d x%02d' % (A[r][c], c+1)) for c in xrange(n) ]) + ' <= 1\n'
lpData += 'binaries\n'
lpData += ' '.join([ ('x%02d' % (c+1)) for c in xrange(n) ]) + '\n'
lpData += 'end\n'
lpFile = open(fileName, 'w')
lpFile.write(lpData)
lpFile.close()

mils = IPO.MixedIntegerLinearSet(fileName)
oracle = IPO.SCIPOracle(fileName, mils)
P = IPO.Polyhedron(oracle)

cons = mils.getConstraints()
lp = IPO.LinearProgram(mils)

print 'Generating facets for %d directions.' % (N)
for i in xrange(N):
  #print('Random objective #%d' % (i+1))
  objective = [None] * len(weights)
  if objectiveType == 'weights':
    for c in xrange(lp.numVariables):
      objective[c] = weights[c] + random.random()
  elif objectiveType == 'random':
    for c in xrange(lp.numVariables):
      objective[c] = random.random() - 0.5
  elif objectiveType == '0/1-random':
    for c in xrange(lp.numVariables):
      rnd = random.random()
      if rnd <= objectiveZeroProbability:
        objective[c] = 0
      else:
        objective[c] = 1
  elif objectiveType == '-1/0/1-random':
    for c in xrange(lp.numVariables):
      if random.random() <= objectiveZeroProbability:
        objective[c] = 0
      elif random.random() > 0.5:
        objective[c] = 1
      else:
        objective[c] = -1
  else:
    assert False
  lp.changeObjective(objective)

  while True:
    sys.stdout.write('.')
    sys.stdout.flush()
    #print('Solving LP with %d rows.' % (lp.numRows))
    (status, point, value) = lp.solve()
    assert status == IPO.LinearProgram.OPTIMAL
    #print('LP-optimum: %s' % (point))
    con = P.separatePoint(point)
    if con is None:
      break
    print('Separated facet: %s' % (con))
    lp.addConstraint(con)
print
