find_path(SCIP_ROOT_DIR
  NAMES include/scip/scip.h
  PATHS /usr/local/
)

file(GLOB SCIP_LIB_LIST "${SCIP_ROOT_DIR}/lib/*")
set(SCIP_OPT_OPT FALSE)
set(SCIP_OPT_DBG FALSE)
set(SCIP_OPT_PRF FALSE)

set(SCIP_LPS_SPX2 TRUE)
set(SCIP_LPS_CPX FALSE)

#message(STATUS "Liblist: ${SCIP_LIB_LIST}\n\n")

foreach(SCIP_LIB ${SCIP_LIB_LIST})
  set(SCIP_PARSE_EXPRESSION ".*scip-([0-9.]+)\\.([a-z]+)\\.([a-z0-9_]+)\\.([a-z]+)\\.([a-z]+).*")
  if(${SCIP_LIB} MATCHES ${SCIP_PARSE_EXPRESSION})
    string(REGEX REPLACE ${SCIP_PARSE_EXPRESSION} "\\1" SCIP_VERSION ${SCIP_LIB})
    string(REGEX REPLACE ${SCIP_PARSE_EXPRESSION} "\\2" SCIP_OS ${SCIP_LIB})
    string(REGEX REPLACE ${SCIP_PARSE_EXPRESSION} "\\3" SCIP_ARCH ${SCIP_LIB})
    string(REGEX REPLACE ${SCIP_PARSE_EXPRESSION} "\\4" SCIP_COMP ${SCIP_LIB})
    string(REGEX REPLACE ${SCIP_PARSE_EXPRESSION} "\\5" SCIP_OPT ${SCIP_LIB})
    # We assume that we only find libscip.* files for the current version/os/architecture/compiler combination!/

    if(SCIP_OPT STREQUAL "opt")
      set(SCIP_OPT_OPT TRUE)
    elseif(SCIP_OPT STREQUAL "dbg")
      set(SCIP_OPT_DBG TRUE)
    elseif(SCIP_OPT STREQUAL "prf")
      set(SCIP_OPT_PRF TRUE)
    endif()
  endif()
endforeach()

#message(STATUS "Libs: Version ${SCIP_VERSION}, os ${SCIP_OS}, arch ${SCIP_ARCH}, comp ${SCIP_COMP}, opt ${SCIP_OPT_OPT},${SCIP_OPT_DBG},${SCIP_OPT_PRF}")

# Requirements

find_package(ZLIB REQUIRED)
find_package(Readline REQUIRED)
find_package(GMP REQUIRED)
if((SCIP_LPS_CPX))
  find_package(Threads REQUIRED)
endif()

# Set up profiling if not done yet
set(CMAKE_CXX_FLAGS_PROFILE " -ggdb -pg ${WALL} " CACHE INTERNAL "C Flags for profile" FORCE)

# Release / Debug / Profile
if((CMAKE_BUILD_TYPE MATCHES "Debug") AND (SCIP_OPT_DBG))
  set(SCIP_OPT "dbg")
  set(ZIMPL_OPT "dbg")
elseif ((CMAKE_BUILD_TYPE MATCHES "Profile") AND (SCIP_OPT_PRF))
  set(SCIP_OPT "prf")
  set(ZIMPL_OPT "opt")
else()
  set(SCIP_OPT "opt")
  set(ZIMPL_OPT "opt")
endif()

# include dir

set(SCIP_INCLUDE_DIR ${SCIP_ROOT_DIR}/include/)

# libraries depend on build type

FIND_LIBRARY(SCIP_OBJSCIP_LIBRARY NAMES objscip-${SCIP_VERSION}.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
FIND_LIBRARY(SCIP_SCIP_LIBRARY NAMES scip-${SCIP_VERSION}.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
FIND_LIBRARY(SCIP_NLPI_LIBRARY NAMES nlpi.cppad-${SCIP_VERSION}.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
FIND_LIBRARY(SCIP_ZIMPL_LIBRARY NAMES zimpl.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${ZIMPL_OPT} PATHS ${SCIP_ROOT_DIR}/lib )

include(FindPackageHandleStandardArgs)

if((SCIP_LPS_SPX2))
  FIND_LIBRARY(SCIP_LPISPX2_LIBRARY NAMES lpispx2-${SCIP_VERSION}.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
  FIND_LIBRARY(SCIP_SPX2_LIBRARY NAMES soplex.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
  find_package_handle_standard_args(SCIP DEFAULT_MSG SCIP_ROOT_DIR SCIP_INCLUDE_DIR SCIP_SCIP_LIBRARY SCIP_LPISPX2_LIBRARY SCIP_NLPI_LIBRARY SCIP_OBJSCIP_LIBRARY SCIP_SPX2_LIBRARY SCIP_ZIMPL_LIBRARY)
  if(SCIP_FOUND)
    set(SCIP_INCLUDE_DIRS ${SCIP_INCLUDE_DIR})
    set(SCIP_LIBRARIES ${SCIP_OBJSCIP_LIBRARY} ${SCIP_SCIP_LIBRARY} ${SCIP_LPISPX2_LIBRARY} ${SCIP_NLPI_LIBRARY} ${SCIP_SPX2_LIBRARY}
      ${SCIP_ZIMPL_LIBRARY} ${ZLIB_LIBRARIES} ${Readline_LIBRARY} ${GMP_LIBRARIES} ${THREADS_LIBRARIES})
  endif()
elseif((SCIP_LPS_CPX))
  FIND_LIBRARY(SCIP_LPICPX_LIBRARY NAMES lpicpx-${SCIP_VERSION}.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.${SCIP_OPT} PATHS ${SCIP_ROOT_DIR}/lib )
  FIND_LIBRARY(SCIP_CPX_LIBRARY NAMES libcplex.${SCIP_OS}.${SCIP_ARCH}.${SCIP_COMP}.a PATHS ${SCIP_ROOT_DIR}/lib )
  find_package_handle_standard_args(SCIP DEFAULT_MSG SCIP_ROOT_DIR SCIP_INCLUDE_DIR SCIP_SCIP_LIBRARY SCIP_LPICPX_LIBRARY SCIP_NLPI_LIBRARY SCIP_OBJSCIP_LIBRARY SCIP_CPX_LIBRARY SCIP_ZIMPL_LIBRARY)
  if(SCIP_FOUND)
    set(SCIP_INCLUDE_DIRS ${SCIP_INCLUDE_DIR})
    set(SCIP_LIBRARIES ${SCIP_OBJSCIP_LIBRARY} ${SCIP_SCIP_LIBRARY} ${SCIP_NLPI_LIBRARY} ${SCIP_LPICPX_LIBRARY} ${SCIP_CPX_LIBRARY}
      ${SCIP_ZIMPL_LIBRARY} ${ZLIB_LIBRARIES} ${Readline_LIBRARY} ${GMP_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  endif()
endif()

message(STATUS "Include: ${SCIP_INCLUDE_DIRS}")

mark_as_advanced(SCIP_INCLUDE_DIR SCIP_SCIP_LIBRARY)
